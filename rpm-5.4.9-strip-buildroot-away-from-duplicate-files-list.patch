--- rpm-5.4.18/build/files.c~	2017-07-18 19:55:03.000000000 +0300
+++ rpm-5.4.18/build/files.c	2017-07-18 19:56:17.522870262 +0300
@@ -2873,7 +2873,7 @@
 
 /* auxiliary function for checkDuplicateFiles() */
 /* XXX need to pass Header because fi->h is NULL */
-static int fiIntersect(rpmfi fi1, rpmfi fi2)
+static int fiIntersect(rpmfi fi1, rpmfi fi2, size_t buildrootL)
 {
     int n = 0;
     int i1, i2;
@@ -2941,7 +2941,7 @@ static int fiIntersect(/*@null@*/ rpmfi
 	    if (!dups)
 		dups = rpmiobNew(0);
 	    dups = rpmiobAppend(dups, "\t", 0);
-	    dups = rpmiobAppend(dups, fn1, 1);
+	    dups = rpmiobAppend(dups, fn1+buildrootL, 1);
 	    n++;
 	}
     }
@@ -2926,7 +2926,7 @@
  * @param spec		spec file control structure
  * @return		number of duplicate files
  */
-static int checkDuplicateFiles(Spec spec)
+static int checkDuplicateFiles(Spec spec, size_t buildrootL)
 {
     int n = 0;
     Package pkg1, pkg2;
@@ -2997,7 +2997,7 @@ static int checkDuplicateFiles(Spec spec
 #endif
 	    if (fi2 == NULL) continue;
 	    (void) rpmfiSetHeader(fi2, pkg2->header);
-	    n += fiIntersect(fi1, fi2);
+	    n += fiIntersect(fi1, fi2, buildrootL);
 	    (void) rpmfiSetHeader(fi2, NULL);
 	    fi2 = rpmfiFree(fi2);
 	}
@@ -2987,7 +2987,7 @@
  *       /A/B/C/D
  * Now directories "/A/B" and "/A/B/C" should also be packaged.
  */
-static int pkgUnpackagedSubdirs(Package pkg)
+static int pkgUnpackagedSubdirs(Package pkg, size_t buildrootL)
 {
     int n = 0;
     int i, j;
@@ -3096,7 +3096,7 @@ static int pkgUnpackagedSubdirs(Package
 
 	for (i = 0; i < n; i++) {
 	    list = rpmiobAppend(list, "\t", 0);
-	    list = rpmiobAppend(list, unpackaged[i], 1);
+	    list = rpmiobAppend(list, unpackaged[i]+buildrootL, 1);
 	    unpackaged[i] = _free(unpackaged[i]);
 	}
 	unpackaged = _free(unpackaged);
@@ -3080,7 +3080,7 @@
  * @param spec		spec file control structure
  * @return		number of unpackaged subdirectories
  */
-static int checkUnpackagedSubdirs(Spec spec)
+static int checkUnpackagedSubdirs(Spec spec, size_t buildrootL)
 {
     int n = 0;
     Package pkg;
@@ -3126,7 +3126,7 @@ static int checkUnpackagedSubdirs(Spec s
     Package pkg;
 
     for (pkg = spec->packages; pkg; pkg = pkg->next)
-	n += pkgUnpackagedSubdirs(pkg);
+	n += pkgUnpackagedSubdirs(pkg, buildrootL);
     return n;
 }
 
@@ -3137,6 +3137,11 @@ rpmRC processBinaryFiles(Spec spec, int
     Package pkg;
     rpmRC res = RPMRC_OK;
     
+    char *buildroot = rpmExpand("%{?buildroot}", NULL);
+    size_t buildrootL = strlen(buildroot);
+
+    buildroot = _free(buildroot);
+
     for (pkg = spec->packages; pkg != NULL; pkg = pkg->next) {
 	int rc;
 
@@ -3178,8 +3183,8 @@ rpmRC processBinaryFiles(Spec spec, int
     if (res == RPMRC_OK) {
 	if (checkUnpackagedFiles(spec) > 0)
 	    res = RPMRC_FAIL;
-	(void) checkDuplicateFiles(spec);
-	(void) checkUnpackagedSubdirs(spec);
+	(void) checkDuplicateFiles(spec, buildrootL);
+	(void) checkUnpackagedSubdirs(spec, buildrootL);
     }
     
     return res;
