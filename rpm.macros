#-----------------------------------------------------------------
%configure { \
 if [ -n "$LINGUAS" ]; then unset LINGUAS; fi; \
 LDFLAGS="${LDFLAGS}%{!?debug: -s}" ; export LDFLAGS ; \
 CFLAGS="${CFLAGS:-%optflags}%{?debug: -g -O}" ; export CFLAGS ; \
 CXXFLAGS="${CXXFLAGS:-%optflags}%{?debug: -g -O}" ; export CXXFLAGS ; \
 FFLAGS="${FFLAGS:-%optflags}%{?debug: -g -O}" ; export FFLAGS ; \
 ./configure %{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
}

#------------------------------------------------------------------------------
# The GNUconfigure macro does the following:
#       update config.guess and config.sub.
#       regenerate all autoconf/automake files
#       optionally change to a directory (make the directory if requested).
#       run configure with correct prefix, platform, and CFLAGS.
#       optionally restore current directory.
#
# Based on autogen.sh from GNOME and orginal GNUconfigure
#
%GNUconfigure(MCs:)      \
  %{-C:_mydir="`pwd`"; %{-M: %{__mkdir} -p %{-C*};} cd %{-C*}} \
  dirs="`find ${_mydir} -name configure.in -print`"; export dirs; \
    for coin in `echo ${dirs}` \
do \
  dr=`dirname ${coin}`; \
if test -f ${dr}/NO-AUTO-GEN; then \
 : \
else \
     macrodirs=`sed -n -e 's,AM_ACLOCAL_INCLUDE(\(.*\)),\1,gp' < ${coin}`; \
    ( cd ${dr}; \
      aclocalinclude="${ACLOCAL_FLAGS}"; \
      for k in ${macrodirs}; do \
        if test -d ${k}; then \
          aclocalinclude="${aclocalinclude} -I ${k}"; \
        ##else \
        ##  echo "**Warning**: No such directory \`${k}'.  Ignored." \
        fi \
      done \
      if grep "^AM_GNU_GETTEXT" configure.in >/dev/null; then \
        if grep "sed.*POTFILES" configure.in >/dev/null; then \
          : do nothing -- we still have an old unmodified configure.in \
        else \
          test -r ${dr}/aclocal.m4 || touch ${dr}/aclocal.m4; \
          echo "no" | gettextize --force --copy; \
          test -r ${dr}/aclocal.m4 && %{__chmod} u+w ${dr}/aclocal.m4; \
        fi \
      fi \
      if grep "^AM_PROG_LIBTOOL" configure.in >/dev/null; then \
        %{__libtoolize} --force --copy; \
      fi \
      aclocal ${aclocalinclude}; \
      if grep "^AM_CONFIG_HEADER" configure.in >/dev/null; then \
        %{__autoheader}; \
      fi \
      echo "Running automake --gnu ${am_opt} ..."; \
      %{__automake} --add-missing --gnu ${am_opt}; \
      %{__autoconf}; \
    ); \
  fi \
done \
  %{-C:${_mydir}}%{!-C:.}/%{configure} \
  %{-C:cd ${_mydir}; unset _mydir}

# Location of autoconf macros
%_aclocaldir	%(aclocal --print-ac-dir)

# Fixed location of top applink dir
%_applnkdir      /usr/X11R6/share/applnk

# Current date
%date 		%(LC_ALL="C" date +"%a %b %d %Y")

# tmp directory
%tmpdir		%(echo "${TMPDIR:-/tmp}")

# Example files, programs, scripts...
%_examplesdir	/usr/src/examples

# Find-requires and directories excluded from auto-req
%_noautoreqdir		%{_defaultdocdir} %{_examplesdir}
%_noautoreqdep		%{nil}
#%__find_requires_pre	/usr/lib/rpm/find-requires-pre %{_noautoreqdir}
#%__find_requires_core	/usr/lib/rpm/find-requires
#%__find_requires_post	/usr/lib/rpm/find-requires-post
#%__find_requires	%{__find_requires_pre} | %{__find_requires_core} | %{__find_requires_post}

# If non-empty "debug" macro defined, add "dbg" suffix to release number
%_rpmfilename		%%{NAME}-%%{VERSION}-%%{RELEASE}%{?debug:dbg}.%%{ARCH}.rpm

#-----------------------------------------------------------------
# find and gzip all files in %{_mandir} and %{infodir}
#
# Requires: xargs, find
#
#%no_install_post_compress_docs	1
%__spec_install_post_compress_docs { \
echo "Compress man and info pages."; \
%{!?no_install_post_compress_docs: \
	%{?verbose:set -x;} \
	for i in /usr/share/man /usr/X11R6/man /usr/share/info; do \
		if [ -d "$RPM_BUILD_ROOT$i" ]; then \
			find "$RPM_BUILD_ROOT$i" -name \*.bz2 -print | xargs -r %{__bzip2} -df; \
			find "$RPM_BUILD_ROOT$i" -name \*.gz -print | xargs -r %{__gzip} -dnf; \
			find "$RPM_BUILD_ROOT$i" -type f -print | xargs -r %{__gzip} -9nf; \
		fi; \
	done; \
} \
}

#-----------------------------------------------------------------
# Strip executable binaries and shared object files
#
# Requires: find, awk, strip, cut, xargs
#
#%no_install_post_strip	1
%__spec_install_post_strip {%{!?debug: \
%{!?no_install_post_strip: \
	%{?verbose:set -x;} \
	echo "Strip executable binaries and shared object files."; \
	filelist=`find $RPM_BUILD_ROOT -type f`; \
	elfexelist=`echo $filelist | xargs -r file | \
		awk '/ELF.*executable/ {print $1}' | cut -d: -f1`; \
	elfsharedlist=`echo $filelist | xargs -r file | \
		awk '/LF.*shared object/ {print $1}' | cut -d: -f1`; \
	if [ -n "$elfexelist" ]; then \
		strip --remove-section=.note  --remove-section=.comment $elfexelist; \
	fi; \
	if [ -n "$elfsharedlist" ]; then \
		strip --strip-unneeded --remove-section=.note  --remove-section=.comment $elfsharedlist; \
	fi; } \
} \
}

#-----------------------------------------------------------------
# post %install sequence:
# - compress all man and info pages,
# - strip all ELF executables and ELF shared objects if not %debug.
#
%__spec_install_post { \
%{__spec_install_post_strip} \
%{__spec_install_post_compress_docs} \
}

%_source_payload        w9.gzdio
%_binary_payload        w9.bzdio
