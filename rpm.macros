# PLD rpm macros

%__id		@__ID@
%__id_u		%{__id} -u 
%__chown_Rhf           @__CHOWN_RHF@
%__chgrp_Rhf           @__CHGRP_RHF@

%_fixowner       [ `%{__id_u}` = '0' ] && %{__chown_Rhf} root.@ROOT_GROUP@
%_fixgroup       true
%_fixperms             %{__chmod} -Rf @FIXPERMS@
%_topdir         %(echo $HOME)/rpm
#-----------------------------------------------------------------
# CFLAGS and LDFLAGS used to build

%debugcflags	-O0 -g -Wall
%rpmcflags	%{?debug:%debugcflags}%{!?debug:%optflags}
%rpmldflags	%{!?debug:-s}

# kernel compiler
%kgcc		gcc
%kgcc_package	gcc

# Build system path macros.
#
%__libtoolize           libtoolize --copy --force
%__gettextize { \
    if ! gettextize --version | grep -q '0\.10\.' ; then \
	if grep -qs 'AM_GNU_GETTEXT.*external' configure.{ac,in} ; then \
	    gettextize --copy --force --no-changelog; \
	else \
	    gettextize --copy --force --no-changelog --intl; \
	fi; \
	if [ ! -f po/Makevars ]; then \
	    cp -f po/Makevars{.template,}; \
	fi; \
    else \
	gettextize --copy --force; \
    fi; \
}
%__autopoint            autopoint --force
%__automake             automake -a -c -f --foreign
%__autoconf             autoconf %{?debug:-Wall}

#-----------------------------------------------------------------
%configure2_13 { \
 if [ -n "$LINGUAS" ]; then unset LINGUAS; fi; \
 LDFLAGS="${LDFLAGS:-%rpmldflags}" ; export LDFLAGS ; \
 CFLAGS="${CFLAGS:-%rpmcflags}" ; export CFLAGS ; \
 CXXFLAGS="${CXXFLAGS:-%rpmcflags}" ; export CXXFLAGS ; \
 FFLAGS="${FFLAGS:-%rpmcflags}" ; export FFLAGS ; \
 CPPFLAGS="${CPPFLAGS:-}" ; export CPPFLAGS ; \
 %{?__cc:CC=%{__cc} ; export CC ; } \
 %{?__cxx:CXX=%{__cxx} ; export CXX ; } \
 %{?configuredir:%{configuredir}}%{!?configuredir:.}/configure \
	--host=%{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
}

#----------------------------------------------------------------
%configure {./configure \
 	LDFLAGS="${LDFLAGS:-%rpmldflags}" \
	CFLAGS="${CFLAGS:-%rpmcflags}" \
	CXXFLAGS="${CXXFLAGS:-%rpmcflags}" \
	FFLAGS="${FFLAGS:-%rpmcflags}" \
	CPPFLAGS="${CPPFLAGS:-}" \
	%{?__cc:CC=%{__cc}} \
	%{?__cxx:CXX=%{__cxx}} \
	--build=%{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
}

# ------------------------------------------------------------------------
# Conditional build stuff.

# Check if symbol is defined.
# Example usage: %if %{defined with_foo} && %{undefined with_bar} ...
%defined()	%{expand:%%{?%{1}:1}%%{!?%{1}:0}}
%undefined()	%{expand:%%{?%{1}:0}%%{!?%{1}:1}}

# Shorthand for %{defined with_...}
%with()		%{expand:%%{?with_%{1}:1}%%{!?with_%{1}:0}}
%without()	%{expand:%%{?with_%{1}:0}%%{!?with_%{1}:1}}

# Handle conditional builds. %bcond_with is for case when feature is
# default off and needs to be activated with --with ... command line 
# switch. %bcond_without is for the dual case.
#
# %bcond_with foo defines symbol with_foo if --with foo was specified on
# command line.
# %bcond_without foo defines symbol with_foo if --without foo was *not* 
# specified on command line.
#
# For example:
#
# %bcond_with extra_fonts
# %bcond_without static
# %if %{with extra_fonts}
# ...
# %endif
# %ifdef %{with static}
# ...
# %endif
# %{?with_static: ... }
# %{!?with_static: ... }
# %{?with_extra_fonts: ... }
# %{!?with_extra_fonts: ... }
# 
# The bottom line: never use without_foo, _with_foo nor _without_foo, only
# with_foo. This way changing default set of bconds for given spec is just
# a matter of changing single line in it and syntax is more readable.
%bcond_with()		%{expand:%%{?_with_%{1}:%%global with_%{1} 1}}
%bcond_without()	%{expand:%%{!?_without_%{1}:%%global with_%{1} 1}}
# ------------------------------------------------------------------------

# Location of autoconf macros
%_aclocaldir	%(aclocal --print-ac-dir)

# Location of omf files
%_omf_dest_dir	%(scrollkeeper-config --omfdir)

# Location of pkgconfig files
%_pkgconfigdir	/usr/lib/pkgconfig

# Location of top applink dir
%_applnkdir	/usr/X11R6/share/applnk

# Location of desktop files
%_desktopdir	/usr/share/applications

# Location of pixmaps for applnk/desktop files
%_pixmapsdir	/usr/share/pixmaps

# Location of themable icons for applnk/desktop files
%_iconsdir	/usr/share/icons

# Location of fonts directories
%_fontsdir	/usr/share/fonts

# Location of Gtk and associated libraries documentation
%_gtkdocdir  %{_defaultdocdir}/gtk-doc/html

# Current date
%date 		%(LC_ALL="C" date +"%a %b %d %Y")

# tmp directory
%tmpdir		%(echo "${TMPDIR:-/tmp}")

# Example files, programs, scripts...
%_examplesdir	/usr/src/examples

# The directory holding Linux kernel sources
%_kernelsrcdir	/usr/src/linux

# If non-empty "debug" macro defined, add "dbg" suffix to release number
%_rpmfilename		%%{NAME}-%%{VERSION}-%%{RELEASE}%{?debug:dbg}.%%{ARCH}.rpm

# Requires name = version-release
%requires_releq()  		%(LC_ALL="C" echo '%*' | xargs -r rpm -q --qf 'Requires: %%{name} = %%{epoch}:%%{version}-%%{release}\\n' | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -v "is not")
%requires_releq_kernel_up()  	%(LC_ALL="C" rpm -qf --qf 'Prereq: kernel-up = %%{epoch}:%%{version}-%%{release}\\n' %{_kernelsrcdir}/include/linux/version.h | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -vE "(is not|no such)")
%requires_releq_kernel_smp()  	%(LC_ALL="C" rpm -qf --qf 'Prereq: kernel-smp = %%{epoch}:%%{version}-%%{release}\\n' %{_kernelsrcdir}/include/linux/version.h | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -vE "(is not|no such)")
%requires_eq_to %(LC_ALL="C" rpm -q --qf 'Requires: %1 = %%{epoch}:%%{version}\\n' %2 | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -v "is not")

%apache_modules_api %(awk '/#define MODULE_MAGIC_NUMBER_MAJOR/ {print $3}' `apr-config --includedir`/ap_mmn.h)

# kernel version-release handling
%__kernel_ver    %(grep UTS_RELEASE %{_kernelsrcdir}/include/linux/version.h 2>/dev/null | cut -d'"' -f2)
%__kernel_rel    %(LC_ALL="C" rpm -qf %{_kernelsrcdir}/include/linux/version.h --queryformat "%{RELEASE}" | grep -v "is not")
%_kernel_ver     %(echo %{__kernel_ver}%{!?_without_dist_kernel:-%{__kernel_rel}})
%_kernel_ver_str %(echo %{_kernel_ver} | sed s/-/_/g)

# sgml macros
%xmlcat_add()            /usr/bin/xmlcatalog --noout --add nextCatalog \"\" %1 /etc/xml/catalog
%xmlcat_del()            /usr/bin/xmlcatalog --noout --del %1 /etc/xml/catalog
%xmlcat_add_rewrite      /usr/bin/xmlcatalog --noout --add rewriteSystem
%xmlcat_create()          /usr/bin/xmlcatalog --noout --create %1
%sgmlcat_add()           /usr/bin/install-catalog --add %1 %2 > /dev/null
%sgmlcat_del()           /usr/bin/install-catalog --remove %1 %2 > /dev/null
%docbook_sgmlcat_fix() { for l in \
'' \
'  -- default decl --' \
'DTDDECL "-//OASIS//DTD DocBook XML V%2//EN" "../../xml.dcl"' \
'  -- hacks for opensp --' \
'SYSTEM "file://%{_datadir}/sgml/docbook/xml-dtd-%2/docbookx.dtd" "%{_datadir}/sgml/docbook/xml-dtd-%2/docbookx.dtd"' \
'SYSTEM "http://www.oasis-open.org/docbook/xml/%2/docbookx.dtd"                  "%{_datadir}/sgml/docbook/xml-dtd-%2/docbookx.dtd"' \
'' \
; do echo $l; done >> %1 \
}

#-----------------------------------------------------------------
# find and gzip all files in %{_mandir} and %{infodir}
#
# Requires: xargs, find
#
#%no_install_post_compress_docs	1
%__spec_install_post_compress_docs { \
echo "Compress man and info pages."; \
%{!?no_install_post_compress_docs: \
	%{?verbose:set -x;} \
	for i in /usr/share/man /usr/X11R6/man /usr/share/info; do \
		if [ -d "$RPM_BUILD_ROOT$i" ]; then \
			find "$RPM_BUILD_ROOT$i" -name \*.bz2 -print | xargs -r %{__bzip2} -df; \
			find "$RPM_BUILD_ROOT$i" -name \*.gz -print | xargs -r %{__gzip} -dnf; \
			find "$RPM_BUILD_ROOT$i" -type f -print | xargs -r %{__gzip} -9nf; \
		fi; \
	done; \
} }

#-----------------------------------------------------------------
# Strip executable binaries and shared object files
#
# Requires: find, awk, strip, cut, xargs
#
#%no_install_post_strip	1
%__spec_install_post_strip {%{!?debug: \
%{!?no_install_post_strip: \
	%{?verbose:set -x;} \
	echo "Strip executable binaries, archives and shared object files."; \
	filelist=`find $RPM_BUILD_ROOT -type f ! -regex ".*ld-[0-9.]*so.*"`; \
	elfexelist=`echo $filelist | xargs -r file | \
		awk '/ELF.*executable/ {print $1}' | cut -d: -f1`; \
	elfsharedlist=`echo $filelist | xargs -r file | \
		awk '/LF.*shared object/ {print $1}' | cut -d: -f1`; \
	elfarchiveslist=`echo $filelist | xargs -r file | \
		awk '/current ar archive/ {print $1}' | cut -d: -f1`; \
	if [ -n "$elfexelist" ]; then \
		strip --remove-section=.note  --remove-section=.comment $elfexelist; \
	fi; \
	if [ -n "$elfsharedlist" ]; then \
		strip --strip-unneeded --remove-section=.note  --remove-section=.comment $elfsharedlist; \
	fi; \
	if [ -n "$elfarchiveslist" ]; then \
		strip --strip-debug --remove-section=.note  --remove-section=.comment $elfarchiveslist; \
	fi; } \
} }
#-----------------------------------------------------------------
# remove all RPATH from executable binaries and shared object files
#
# Requires: find, awk, cut, xargs, chrpath, uname
#
#%no_install_post_chrpath	1
%__spec_install_post_chrpath {%{!?debug: \
%{!?no_install_post_chrpath: \
	%{?verbose:set -x;} \
echo "Remove RPATH from executable binaries and shared object files."; \
if [ "$(uname -m)" != alpha ] ; then \
find $RPM_BUILD_ROOT -type f ! -regex ".*ld-[0-9.]*so.*" | xargs -r file | \
	awk '/ELF.*(executable|shared object)/ {print $1}' | cut -d: -f1 | \
while read file ; do \
	rpath= ; \
	chmod u+w "$file"; \
	for dir in `chrpath -l "$file" | \
		    awk '/RPATH=/ { gsub(/.*RPATH=/,""); gsub(/:/," "); print $0 }'` ; do \
			case $dir in \
			/home/* | /tmp/* | /usr/lib | /lib | /usr/local/lib | /usr/X11R6/lib ) \
				echo "remove-rpath: $dir in $file"; \
				;; \
			* ) \
				if [ "$rpath" = "" ] ; then rpath="$dir" ; \
				else rpath="$rpath:$dir" ; fi ; \
				;; \
			esac ; \
	done ; \
	if [ "$rpath" = "" ] ; then chrpath -d "$file" > /dev/null ; \
	else chrpath -r "$rpath" "$file" > /dev/null ; fi ; \
done; fi; } \
} }
#-----------------------------------------------------------------
# Find and gzip all kernel modules
#
# Requires: find
#
#%no_install_post_compress_modules  1
%__spec_install_post_compress_modules { \
%{!?no_install_post_compress_modules: \
echo "Compress kernel modules if any."; \
    %{?verbose:set -x;} \
    if test -d $RPM_BUILD_ROOT/lib/modules ; then \
       find $RPM_BUILD_ROOT/lib/modules -name \*.o -type f -print | \
       xargs -r %{__gzip} -9nf; \
	   find $RPM_BUILD_ROOT/lib/modules -name \*.o -type l -printf "%p %l\n" | \
	   while read a b; do ln -sf $b.gz $a.gz; rm -f $a; done; \
    fi; \
} }

%_source_payload        w9.gzdio
%_binary_payload        w9.bzdio

#-----------------------------------------------------------------
# Update all GConf2 schemas
#
# Requires: GConf2
#
%gconf_schema_install { umask 022; \
    GCONF_CONFIG_SOURCE="xml:readwrite:/etc/gconf/gconf.xml.defaults" \
    /usr/bin/gconftool-2 --makefile-install-rule \
    /etc/gconf/schemas/*.schemas > /dev/null \
}

#-----------------------------------------------------------------
# post %install sequence:
# - autodeps exceptions
# - compress all man and info pages,
# - strip all ELF executables and ELF shared objects if not %debug.
# - compress kernel modules if any

###################################################################
# Requires/Provides automation
# exceptions system by Jacek Konieczny <jajcus@pld.org.pl>
%__spec_prep_pre \
_autoreqprov=n \
%{?_noautocompressdoc:_autoreqprov=y}\
if [ "$_autoreqprov" = "y" ] ; then \
    if [ -f %{_builddir}/__rpm_lock ] ; then \
	echo "Some package using \%_noauto*  macros is already being built" >&2 \
	echo "If it is not true delete %{_builddir}/__rpm_lock" >&2 \
	exit 1 \
    else \
	rm -f %{_builddir}/__rpm_*\
    	touch %{_builddir}/__rpm_lock \
    fi \
fi \
%{?_noautocompressdoc:echo '%{_noautocompressdoc}' > %{_builddir}/__rpm_noautocompressdoc}\
%{___build_pre}\
%{nil}


%__spec_clean_pre	%{___build_pre}\
_autoreqprov=n \
%{?_noautocompressdoc:_autoreqprov=y}\
if [ "$_autoreqprov" = "y" ] ; then \
	rm -f %{_builddir}/__rpm_* \
fi \
%{nil}


#%_noautoreqfiles	"%{_defaultdocdir}.*" "%{_examplesdir}.*"
#%_noautoreq		%{nil}
#%_noautoreqdep		%{nil}
#%_noautoprovfiles	%{nil}
#%_noautoprov		%{nil}
%_missing_doc_files_terminate_build	1%{nil}
%_unpackaged_files_terminate_build	%{nil}
# (X)emacs support
%___emacs_lispdir_helper  -batch -q -eval '(while load-path (princ (concat (car load-path) "\\n")) (setq load-path (cdr load-path)))' 2> /dev/null|sed -n '/\\(.*\\/x\\?emacs\\/site-lisp\\)\\/\\?$/{s,,\\1,p;q;}'
%_emacs_lispdir %(emacs %___emacs_lispdir_helper)
%_xemacs_lispdir %(xemacs %___emacs_lispdir_helper)

%__php_provides	@RPMCONFIGDIR@/php.prov
%__php_requires @RPMCONFIGDIR@/php.req

# Perl specific macro definitions.
%perl_privlib	%(eval "`%{__perl} -V:installprivlib`"; echo $installprivlib)
%perl_archlib	%(eval "`%{__perl} -V:installarchlib`"; echo $installarchlib)
%perl_vendorlib	%(eval "`%{__perl} -V:installvendorlib`"; echo $installvendorlib)
%perl_vendorarch	%(eval "`%{__perl} -V:installvendorarch`"; echo $installvendorarch)
%perl_sitelib	%(eval "`%{__perl} -V:installsitelib`"; echo $installsitelib)
%perl_sitearch	%(eval "`%{__perl} -V:installsitearch`"; echo $installsitearch)

%php_pear_dir	%{_datadir}/pear

# Python specific macro definitions.
# python main version
%py_ver         %(echo `python -c "import sys; print sys.version[:3]"`)

# directories
%py_prefix      %(echo `python -c "import sys; print sys.prefix"`)
%py_libdir      %{py_prefix}/lib/python%{py_ver}
%py_incdir      /usr/include/python%{py_ver}
%py_sitedir     %{py_libdir}/site-packages
%py_dyndir      %{py_libdir}/lib-dynload

# pure python modules compilation
%py_comp        python -c "import compileall; import sys; compileall.compile_dir(sys.argv[1], ddir=sys.argv[1][len('$RPM_BUILD_ROOT'):])"

%py_ocomp       python -O -c "import compileall; import sys; compileall.compile_dir(sys.argv[1], ddir=sys.argv[1][len('$RPM_BUILD_ROOT'):])"

# Software written in Python language require Python with main version
# unchanged
%pyrequires_eq() Requires:       %1 >= %py_ver %1 < %(echo `python -c "import sys; import string; ver=sys.version[:3].split('.'); ver[1]=str(int(ver[1])+1); print string.join(ver, '.')"`)

# depmod macro
%depmod() { \
if [ -e /boot/System.map-%1 ]; then \
        /sbin/depmod -a -F /boot/System.map-%1 %1; \
else \
        if [ -e /boot/System.map ]; then \
                /sbin/depmod -a -F /boot/System.map %1; \
        else \
                /sbin/depmod -a %1; \
        fi \
fi; \
}

