# $Revision$, $Date$
# PLD Linux rpm macros

%epoch		0
%x8664		x86_64 amd64 ia32e

# kernel compiler
%kgcc		%{__cc}
%kgcc_package	gcc

# compiler version
%cc_version		%{expand:%%global cc_version %(%{__cc} -dumpversion || echo ERROR)}%cc_version
%cxx_version	%{expand:%%global cxx_version %(%{__cxx} -dumpversion || echo ERROR)}%cxx_version

%__rm			/bin/rm --interactive=never

# Build system path macros.
#
%__autoconf		autoconf %{?debug:-Wall}
%__automake		automake -a -c -f --foreign
%__autopoint		autopoint --force

%__gettextize { \
	if grep -qs 'AM_GNU_GETTEXT.*external' configure.{ac,in} ; then \
		gettextize --copy --force --no-changelog; \
	else \
		gettextize --copy --force --no-changelog --intl; \
	fi; \
	if [ ! -f po/Makevars ]; then \
		cp -f po/Makevars{.template,}; \
	fi; \
}

%__glib_gettextize	glib-gettextize --copy --force
%__gnome_doc_common	gnome-doc-common --copy
%__gnome_doc_prepare	gnome-doc-prepare --copy --force
%__gtkdocize		gtkdocize --copy
%__intltoolize		intltoolize --copy --force
%__libtoolize		libtoolize --copy --force --install

#	Path to top of build area.
%_topdir		%{expand:%%global _topdir %(test -d ../SPECS -a -d ../SOURCES && (cd ..; pwd) || echo $HOME/rpm)}%_topdir

#	The number of cvs changelog entries kept when building package.
%_buildchangelogtruncate 20

%dependencytracking	%{nil}

#	Relations between package names that cause dependency loops
#	with legacy packages that cannot be fixed. Relations are
#	specified as
#		p>q
#	where package p has a Requires: on something that package q Provides:
#
# XXX	Note: that there cannot be any whitespace within the string "p>q",
#	and that both p and q are package names (i.e. no version/release).
%_dependency_whiteout	%{nil}

%_smp_mflags %([ -z "$RPM_BUILD_NCPUS" ] \\\
	&& RPM_BUILD_NCPUS=$(/usr/bin/getconf _NPROCESSORS_ONLN); \\\
	[ "$RPM_BUILD_NCPUS" -gt 1 ] && echo "-j$(($RPM_BUILD_NCPUS * 2))")

#-----------------------------------------------------------------
#
# (re)definition of %{rpm*flags} with %filterout_* support
# BuildRequires:	awk
# BuildRequires:	rpmbuild(macros) >= 1.315
#
# Flags specified in %filterout_* are removed from %rpm*flags, exactly:
# %rpmcflags    = %optflags - %filterout - %filterout_c   - %filterout_ld
# %rpmcxxflags  = %optflags - %filterout - %filterout_cxx - %filterout_ld
# %rpmcppflags  = %optcppflags - %filterout - %filterout_cpp - %filterout_ld
# %rpmldflags   = %optldflags - %filterout_ld
#
# Regular expressions are supported, but to avoid some character be treated
# as regular expression it must be escaped twice.

%filter_out 						\
	for (i = 1; i in I; i++) { 	A=0;	\
		for (f in F) {				\
			if (I[i] ~ "^" F[f] "$") A=1;	\
		};							\
		if (!A) printf(I[i] FS);	\
	}

%rpmcflags %(awk 'BEGIN {
	split("%{?debug:%debugcflags}%{!?debug:%optflags}%{?debuginfocflags}",I);
	split("%{?filterout} %{?filterout_c} %{?filterout_ld}",F);
	%{filter_out}
}')

%rpmcxxflags %(awk 'BEGIN {
	split("%{?debug:%debugcflags}%{!?debug:%optflags}%{?debuginfocflags}",I);
	split("%{?filterout} %{?filterout_cxx} %{?filterout_ld}",F);
	%{filter_out}
}')

%rpmcppflags %(awk 'BEGIN {
	split("%{?debug:%debugcppflags}%{!?debug:%optcppflags}%{?debuginfocppflags}",I);
	split("%{?filterout} %{?filterout_cpp} %{?filterout_cpp}",F);
	%{filter_out}
}')

%rpmldflags %(awk 'BEGIN {
	split("%{?optldflags}",I);
	split("%{?filterout_ld}",F)
	%{filter_out}
}')

# rpmldflags with stripped -Wl, -- in the form flags have to be passed to 'ld'
# but, don't use it, better use gcc as linker
%ld_rpmldflags %(awk 'BEGIN {
        split("%{rpmldflags}",F);
        for (f in F) {
                s = F[f];
                if (s ~ /^-Wl,/) {
                        s = substr(s,5);
                        gsub(/,/," ",s);
                };
                printf(s FS);
        };
}')

#-----------------------------------------------------------------
#
#  Generate a command which cleans environment, leaving only the
# most important variables.
#  If any spec requires any additional environment it should
# redefine %_preserve_env in following manner:
#
#	# ADDITIONAL_VAR is required because [a good reason here]
#	%{expand:%%define _preserve_env %_preserve_env ADDITIONAL_VAR}

%_preserve_env	PATH HOME TMP TMPDIR

%_clean_env		env -i %(awk -vq="'" -vqq="\\"'\\"" -vq2q="'\\"'" 'BEGIN {
	split("%{?_preserve_env:%_preserve_env}", P);
	for (i in P) {
		p = P[i];
		if (ENVIRON[p]) {
			split( ENVIRON[p], V, "" );
			val = p "=";
			for ( j = 1; j in V; j++ ) {
				v = V[j];
				if ( v == q )
					v = qq;
				else if ( v == "\\"" )
					v = q2q;
				else if ( v == "\\\\" )
					v = "\\\\\\\\";
				else
					gsub( "[^a-zA-Z0-9/:._-]", "\\"&\\"", v );
				val = val "" v;
			}
			printf( val " " );
		}
	}
}')

#-----------------------------------------------------------------
%configure2_13 { \
 if [ -n "$LINGUAS" ]; then unset LINGUAS; fi; \
 LDFLAGS="${LDFLAGS:-%rpmldflags}" ; export LDFLAGS ; \
 CFLAGS="${CFLAGS:-%rpmcflags}" ; export CFLAGS ; \
 CXXFLAGS="${CXXFLAGS:-%rpmcxxflags}" ; export CXXFLAGS ; \
 FFLAGS="${FFLAGS:-%rpmcflags}" ; export FFLAGS ; \
 FCFLAGS="${FCFLAGS:-%rpmcflags}" ; export FCFLAGS ; \
 CPPFLAGS="${CPPFLAGS:-%rpmcppflags}" ; export CPPFLAGS ; \
 %{?__cc:CC="%{__cc}" ; export CC ; } \
 %{?__cxx:CXX="%{__cxx}" ; export CXX ; } \
 %{?configuredir:%{configuredir}}%{!?configuredir:.}/configure \
	--host=%{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
	--x-libraries=%{?_x_libraries}%{!?_x_libraries:%{_libdir}} \
	%{dependencytracking} \
}

%__cmake	/usr/bin/cmake
%cmake { \
CC="%{__cc}" \
CXX="%{__cxx}" \
CFLAGS="%{rpmcflags}" \
CXXFLAGS="%{rpmcxxflags}" \
LDFLAGS="%{rpmldflags}" \
%{__cmake} \
}

# override __scons to add -j4 in your ~/.rpmmacros for parallel make
%__scons	/usr/bin/scons
%scons { \
%{__scons} \
	LDFLAGS="${LDFLAGS:-%rpmldflags}" \
	CFLAGS="${CFLAGS:-%rpmcflags}" \
	CXXFLAGS="${CXXFLAGS:-%rpmcxxflags}" \
	FFLAGS="${FFLAGS:-%rpmcflags}" \
	CPPFLAGS="${CPPFLAGS:-%rpmcppflags}" \
	%{?__cc:CC="%{__cc}"} \
	%{?__cxx:CXX="%{__cxx}"} \
	libsuffix=%{_lib} \
	prefix=%{_prefix} \
}

# waf. see waf.spec
# override __waf to add -j4 in your ~/.rpmmacros for parallel make
%__waf	/usr/bin/waf
%waf { \
CC="%{__cc}" \
CXX="%{__cxx}" \
CPP="%{__cpp}" \
CFLAGS="%{rpmcflags}" \
CXXFLAGS="%{rpmcxxflags}" \
%{__waf} \
}

#----------------------------------------------------------------
#%configure_cache 0
%configure_cache_file	%{buildroot}.configure.cache

%configure {./configure \
 	LDFLAGS="${LDFLAGS:-%rpmldflags}" \
	CFLAGS="${CFLAGS:-%rpmcflags}" \
	CXXFLAGS="${CXXFLAGS:-%rpmcxxflags}" \
	FFLAGS="${FFLAGS:-%rpmcflags}" \
	FCFLAGS="${FCFLAGS:-%rpmcflags}" \
	CPPFLAGS="${CPPFLAGS:-%rpmcppflags}" \
	%{?__cc:CC="%{__cc}"} \
	%{?__cxx:CXX="%{__cxx}"} \
	--host=%{_target_platform} \
	--build=%{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
	--x-libraries=%{?_x_libraries}%{!?_x_libraries:%{_libdir}} \
	%{dependencytracking} \
	%{?configure_cache:--cache-file=%{configure_cache_file}} \
}

# overload to insert debuginfo package
%prep \
%if 0%{?_enable_debug_packages}\
%{debug_package}\
%endif\
%%prep\
%{nil}

# Location of autoconf macros
%_aclocaldir	%{expand:%%global _aclocaldir %(aclocal --print-ac-dir || echo ERROR)}%_aclocaldir

# Location of omf files
%_omf_dest_dir	%{expand:%%global _omf_dest_dir %(scrollkeeper-config --omfdir || echo ERROR)}%_omf_dest_dir

# Location of pkgconfig files
%_pkgconfigdir	/usr/%{_lib}/pkgconfig
# noarch pkgconfig files
%_npkgconfigdir	/usr/share/pkgconfig

# Location of desktop files
%_desktopdir	/usr/share/applications
%_applnkdir	ERROR:_applnkdir_is_obsolete_use_desktopdir_instead

# Location of pixmaps for applnk/desktop files
%_pixmapsdir	/usr/share/pixmaps

# Location of themable icons for applnk/desktop files
%_iconsdir	/usr/share/icons

# Location of fonts directories
%_fontsdir	/usr/share/fonts

# Location of Gtk and associated libraries documentation
%_gtkdocdir	%{_defaultdocdir}/gtk-doc/html

# Location of KDE documentation
%_kdedocdir	%{_defaultdocdir}/kde/HTML

# unsermake script
%__unsermake /usr/share/unsermake/unsermake

# Current date
%date 		%(LC_ALL=C date +"%a %b %d %Y")

# Example files, programs, scripts...
%_examplesdir	/usr/src/examples

# Alternative kernel type/version
%_alt_kernel	%{nil}%{?alt_kernel:-%{?alt_kernel}}

# The directory holding Linux kernel sources
%_kernelsrcdir	/usr/src/linux%{_alt_kernel}

# If non-empty "debug" macro defined, add "dbg" suffix to release number
%_rpmfilename		%%{NAME}-%%{VERSION}-%%{RELEASE}%{?debug:dbg}.%%{ARCH}.rpm

# Requires name = version-release
%requires_releq()		%(Z=$(echo '%*' | LC_ALL=C xargs -r rpm -q --qf 'Requires: %{N} = %|E?{%{E}:}|%{V}-%{R}\\n'); if echo "$Z" | ! grep -v '^Requires:'; then echo "$Z"; fi)

%releq_kernel			%{expand:%%global releq_kernel %(R=$(LC_ALL=C rpm -q --qf '%{N} = %|E?{%{E}:}|%{V}-%{R}' -f %{_kernelsrcdir}/include/linux/version.h 2>/dev/null | grep -v 'is not' | sed -e 's:-headers::;s:-config::'); echo ${R:-ERROR})}%releq_kernel
%releq_kernel_up		%{expand:%%global releq_kernel_up %(R=$(LC_ALL=C rpm -q --qf '%{N}-up = %|E?{%{E}:}|%{V}-%{R}' -f %{_kernelsrcdir}/include/linux/version.h 2>/dev/null | grep -v 'is not' | sed -e 's:-headers::;s:-config::'); echo ${R:-ERROR})}%releq_kernel_up
%releq_kernel_smp()		%{expand:%%global releq_kernel_smp %(R=$(LC_ALL=C rpm -q --qf '%{N}-smp = %|E?{%{E}:}|%{V}-%{R}' -f %{_kernelsrcdir}/include/linux/version.h 2>/dev/null | grep -v 'is not' | sed -e 's:-headers::;s:-config::'); echo ${R:-ERROR})}%releq_kernel_smp
%requires_releq_kernel(s:)		Requires%{-s:(%{-s*})}: %releq_kernel
%requires_releq_kernel_up(s:)	Requires%{-s:(%{-s*})}: %releq_kernel_up
%requires_releq_kernel_smp(s:)	Requires%{-s:(%{-s*})}: %releq_kernel_smp

# Requires: name = version
%requires_eq()		%{!?1:ERROR}%{?2:ERROR}%{?1:%{!?2:%{expand:%%requires_eq_to %1 %1}}}
# Requires: name = version (version based on querying package %2)
%requires_eq_to()	%{!?2:ERROR}%{?3:ERROR}%{?2:%{!?3:%(Z=$(LC_ALL=C rpm -q --qf 'Requires: %1 = %|E?{%{E}:}|%{V}\\n' %2); if ! echo "$Z" | grep '^Requires:'; then echo "BuildRequires: %2"; fi)}}

%apache_modules_api %{expand:%%global apache_modules_api %(awk '/#define MODULE_MAGIC_NUMBER_MAJOR/ {print $3}' /usr/include/apache/ap_mmn.h 2>/dev/null || echo ERROR)}%apache_modules_api

# kernel version-release handling
%__kernel_ver	 %{expand:%%global __kernel_ver %( \\
	Z=$(awk -F'"' '/UTS_RELEASE/{print $2}' %{_kernelsrcdir}/include/linux/{version,utsrelease}.h 2>/dev/null); \\
	Z=${Z:-$(awk -F' = ' '/^VERSION/{v=$2} /^PATCHLEVEL/{p=$2} /^SUBLEVEL/{s=$2} /^EXTRAVERSION/{e=$2} END {printf("%d.%d.%d%s", v, p, s, e)}' %{_kernelsrcdir}/Makefile 2>/dev/null)}; \\
	echo ${Z:-ERROR}; \\
)}%__kernel_ver

%__kernel_rel	%{expand:%%global __kernel_rel %(Z=$(LC_ALL=C rpm -qf %{_kernelsrcdir}/include/linux/fs.h 2>/dev/null --qf "%{R}" | grep -v "is not"); echo ${Z:-ERROR})}%__kernel_rel
%__kernel_rpmvr	%{expand:%%global __kernel_rpmvr %(Z=$(LC_ALL=C rpm -qf %{_kernelsrcdir}/include/linux/fs.h 2>/dev/null --qf "%{V}-%{R}" | grep -v "is not"); echo ${Z:-ERROR})}%__kernel_rpmvr
%_kernel_ver	%{expand:%%global _kernel_ver %{__kernel_ver}%{?with_dist_kernel:%(echo %{__kernel_ver} | grep -q -e - || echo -%{__kernel_rel})}}%_kernel_ver
%_kernel_ver_str %{expand:%%global _kernel_ver_str %(echo %{!?_without_dist_kernel:%{__kernel_rpmvr}}%{?_without_dist_kernel:%{__kernel_ver}} | sed -e 's/-/_/g')}%_kernel_ver_str

# `uname -r` to be used in @release field
%_kernel_vermagic	%{expand:%%global _kernel_vermagic %(echo %{_kernel_ver} | sed -e 's/-/_/g')}%_kernel_vermagic

# sgml macros
%xmlcat_add()		/usr/bin/xmlcatalog --noout --add nextCatalog \"\" %1 /etc/xml/catalog ;
%xmlcat_del()		/usr/bin/xmlcatalog --noout --del %1 /etc/xml/catalog ;
%xmlcat_add_rewrite	/usr/bin/xmlcatalog --noout --add rewriteSystem
%xmlcat_create()	/usr/bin/xmlcatalog --noout --create %1 ;
%sgmlcat_add()		/usr/bin/install-catalog --add %1 %2 > /dev/null ;
%sgmlcat_del()		/usr/bin/install-catalog --remove %1 %2 > /dev/null ;
%docbook_sgmlcat_fix() { for l in \
'' \
'  -- default decl --' \
'DTDDECL "-//OASIS//DTD DocBook XML V%2//EN" "../../xml.dcl"' \
'  -- hacks for opensp --' \
'SYSTEM "file://%{_datadir}/sgml/docbook/xml-dtd-%2/docbookx.dtd" "%{_datadir}/sgml/docbook/xml-dtd-%2/docbookx.dtd"' \
'SYSTEM "http://www.oasis-open.org/docbook/xml/%2/docbookx.dtd"                  "%{_datadir}/sgml/docbook/xml-dtd-%2/docbookx.dtd"' \
'' \
; do echo $l; done >> %1 \
}

# vim - "

# minimum file size needed for compressed documents.
# just smaller files than this get larger when compressed.
# some stats:
# - 0 byte file compressed was 25 bytes .gz
# - 39 byte file was compressed as 57
# - with test/test.spec@man 158 byte file was compressed also 158
%_min_compress_bytes	159

#-----------------------------------------------------------------
# find and gzip all files in %{_mandir} and %{infodir}
#
# Requires: xargs, find
#
#%no_install_post_compress_docs	1
%__spec_install_post_compress_docs { \
%{!?no_install_post_compress_docs:__spec_install_post_compress_docs() { \
	for i in /usr/share/man /usr/X11R6/man; do \
		if [ -d "$RPM_BUILD_ROOT$i" ]; then \
			echo "Compress man pages: $i"; \
			find "$RPM_BUILD_ROOT$i" -name '*.bz2' -print | xargs -r %{__bzip2} -df; \
			find "$RPM_BUILD_ROOT$i" -name '*.gz' -print | xargs -r %{__gzip} -dnf; \
			find $RPM_BUILD_ROOT$i -type l | while read a; do \
				m=$(readlink $a); \
				rm -f $a; \
				echo .so ${m##*/} > $a; \
				echo >&2 "Converted ${a#$RPM_BUILD_ROOT} from symlink to man link: ${m##*/}"; \
			done; \
			find "$RPM_BUILD_ROOT$i" -type f -size +%{_min_compress_bytes}c -print | xargs -r %{__gzip} -9nf; \
		fi; \
	done; \
	if [ -d "$RPM_BUILD_ROOT%{_infodir}" ]; then \
		echo "Compress info pages: %{_infodir}"; \
		find "$RPM_BUILD_ROOT%{_infodir}" -name '*.bz2' -print | xargs -r %{__bzip2} -df; \
		find "$RPM_BUILD_ROOT%{_infodir}" -name '*.gz' -print | xargs -r %{__gzip} -dnf; \
		find "$RPM_BUILD_ROOT%{_infodir}" -name '*.info*' -type f -size +%{_min_compress_bytes}c -print | xargs -r %{__gzip} -9nf; \
	fi; \
}; __spec_install_post_compress_docs } }

#-----------------------------------------------------------------
# Strip executable binaries and shared object files
#
# Requires: find, awk, strip, cut, xargs
#
# Special macros which affect this process:
#%no_install_post_strip	1		# disable stripping at all
#%_noautostrip			regexp	# exclude files matching (anchored!) regex from stripping
#%_autostripall			regexp	# strip files matching (anchored!) regex using plain strip
#%_autostripunneeded	regexp	# strip files matching (anchored!) regex using strip --strip-unneeded
#%_autostripdebug		regexp	# strip files matching (anchored!) regex using strip --strip-debug
#
%__spec_install_post_strip {%{!?debug: \
%{!?no_install_post_strip:__spec_install_post_strip() { \
if [ -d "$RPM_BUILD_ROOT" ]; then \
	if [ -d $RPM_BUILD_ROOT/lib/modules ]; then \
		modulelist=$(find $RPM_BUILD_ROOT/lib/modules -name '*o' -type f -print); \
		if [ "$modulelist" ]; then \
			modulecount=$(echo "$modulelist" | wc -l); \
			printf "Stripping %d kernel modules..." $modulecount; \
			echo "$modulelist" | xargs -l512 chmod u+w; \
			echo "$modulelist" | xargs -l512 %{__strip} --strip-unneeded --remove-section=.comment --remove-section=.note.GNU-stack; \
			echo "DONE"; \
		fi; \
	fi; \
	filelist=$(find $RPM_BUILD_ROOT -type f ! -regex ".*/usr/lib[0-9]*/debug/.*\.debug" ! -regex ".*/lib/modules/.*" ! -regex ".*%{_docdir}/.*" ! -regex ".*%{_includedir}/.*" %{?_noautostrip:! -regex "%{_noautostrip}"} %{?_autostripall:! -regex "%{_autostripall}"} %{?_autostripunneeded:! -regex "%{_autostripunneeded}"} %{?_autostripdebug:! -regex "%{_autostripdebug}"}); \
	if [ -n "$filelist" ]; then \
		filetypes=`echo "$filelist" | xargs -r -d'\\n' file`; \
		elfexelist=`echo "$filetypes" | awk -F: '/ELF.*executable/ {print $1}'`; \
		elfsharedlist=`echo "$filetypes" | awk -F: '/LF.*shared object/ {print $1}'`; \
		archiveslist=`echo "$filetypes" | awk -F: '/current ar archive/ {print $1}'`; \
		if [ -n "$elfexelist" ]; then \
			printf "Stripping %d ELF executables..." $(echo "$elfexelist" | wc -l); \
			chmod u+w $elfexelist; \
			%{__strip} --remove-section=.note --remove-section=.comment $elfexelist; \
			echo "DONE"; \
		fi; \
		if [ -n "$elfsharedlist" ]; then \
			printf "Stripping %d ELF shared libraries..." $(echo "$elfsharedlist" | wc -l); \
			chmod u+w $elfsharedlist; \
			%{__strip} --strip-unneeded --remove-section=.note --remove-section=.comment $elfsharedlist; \
			echo "DONE"; \
		fi; \
		if [ -n "$archiveslist" ]; then \
			printf "Stripping %d ar archives..." $(echo "$archiveslist" | wc -l); \
			chmod u+w $archiveslist; \
			%{__strip} --strip-debug --remove-section=.note --remove-section=.comment $archiveslist; \
			echo "DONE"; \
		fi; \
	fi; \
    filelist_all=%{?_autostripall:$(find $RPM_BUILD_ROOT -type f -regex "%{_autostripall}")}; \
    filelist_unneeded=%{?_autostripunneeded:$(find $RPM_BUILD_ROOT -type f -regex "%{_autostripunneeded}")}; \
    filelist_debug=%{?_autostripdebug:$(find $RPM_BUILD_ROOT -type f -regex "%{_autostripdebug}")}; \
	if [ -n "$filelist_all" ]; then \
		printf "Stripping everything from %d additional files..." $(echo "$filelist_all" | wc -l); \
		chmod u+w $filelist_all; \
		%{__strip} --remove-section=.note --remove-section=.comment $filelist_all; \
		echo "DONE"; \
	fi; \
	if [ -n "$filelist_unneeded" ]; then \
		printf "Stripping unneeded from %d additional files..." $(echo "$filelist_unneeded" | wc -l); \
		chmod u+w $filelist_unneeded; \
		%{__strip} --strip-unneeded --remove-section=.note --remove-section=.comment $filelist_unneeded; \
		echo "DONE"; \
	fi; \
	if [ -n "$filelist_debug" ]; then \
		printf "Stripping debuginfo from %d additional files..." $(echo "$filelist_debug" | wc -l); \
		chmod u+w $filelist_debug; \
		%{__strip} --strip-debug --remove-section=.note --remove-section=.comment $filelist_debug; \
		echo "DONE"; \
	fi; \
fi; }; __spec_install_post_strip } } }

#-----------------------------------------------------------------
# remove all RPATH from executable binaries and shared object files
#
# Requires: find, awk, cut, xargs, chrpath, uname
#
# Special macros which affect this process
#%no_install_post_chrpath	1	# disable chrpath at all
#%_noautochrpath	regex		# exclude files matching (anchored!) regex from chrpath
#
%__spec_install_post_chrpath {%{!?debug: \
%{!?no_install_post_chrpath: __spec_install_post_chrpath() { \
if [ -d "$RPM_BUILD_ROOT" ]; then \
	files=`find $RPM_BUILD_ROOT -type f ! -regex ".*ld-[0-9.]*so.*" ! -regex ".*/usr/lib[0-9]*/debug/.*" ! -regex ".*/lib/modules/.*" ! -regex ".*%{_docdir}/.*" ! -regex ".*%{_includedir}/.*" %{?_noautochrpath:! -regex "%{_noautochrpath}"}`; \
	if [ -n "$files" ]; then \
		objs=`echo "$files" | xargs -r -d'\\n' file | awk -F: '/ELF.*(executable.*dynamically linked|shared object)/ {print $1}'`; \
	fi; \
	if [ -n "$objs" ]; then \
		printf "Remove RPATH from %d executable binaries and shared object files.\n" $(echo "$objs" | wc -l); \
		echo "$objs" | \
		while read file; do \
			rpath= ; \
			chmod u+w "$file"; \
			for dir in $(chrpath -l "$file" | awk '/RPATH=/ { gsub(/.*RPATH=/,""); gsub(/:/," "); print $0 }'); do \
					case $dir in \
					'$ORIGIN' ) \
						if [ "$rpath" = "" ] ; then rpath="$dir" ; \
						else rpath="$rpath:$dir" ; fi ; \
						continue ; \
						;; \
					esac ; \
					newdir=$(readlink -m "$dir"); \
					[ ${#newdir} -le ${#dir} ] && dir=$newdir; \
					case $dir in \
					/home/* | /tmp/* | /usr/lib | /usr/lib64 | /lib | /lib64 | /usr/local/lib | /usr/local/lib64 | /usr/X11R6/lib | /usr/X11R6/lib64 ) \
						echo "remove-rpath: $dir in $file"; \
						;; \
					* ) \
						if [ "$rpath" = "" ] ; then rpath="$dir" ; \
						else rpath="$rpath:$dir" ; fi ; \
						;; \
					esac ; \
			done ; \
			if [ "$rpath" = "" ] ; then chrpath -d "$file" > /dev/null ; \
			else chrpath -r "$rpath" "$file" > /dev/null ; fi ; \
		done; \
	fi; \
fi; }; __spec_install_post_chrpath } } }

#-----------------------------------------------------------------
# Find all shared object files with unresolved symbols. Warn
# and terminate if any found (termination can be turned off by define).
#%no_install_post_check_so 1
%__spec_install_post_check_so { \
 __spec_install_post_check_so() { \
    fail=0; \
    printf "Searching for shared objects with unresolved symbols..."; \
    for f in $(find $RPM_BUILD_ROOT -type f -name '*.so.*' -print); do \
        LC_ALL=C objdump -T $f 2> /dev/null | LC_ALL=C awk -v "file=$f" 'BEGIN { found=0; skip["program_name"]=1; symbols = "" } /^[0-9a-z]+ +D +\*UND\*/ { if ($NF in skip) { next; }; found = 1; symbols = symbols "\n\t" $NF } END { if (found) { print "\nUnresolved symbols found in: " file symbols; exit(1); } } ' || fail=1 ; \
    done ; \
    echo " DONE"; \
    %{!?no_install_post_check_so:[ $fail -eq 1 ] && : || :;} \
}; __spec_install_post_check_so }}

#-----------------------------------------------------------------
# Find and gzip all kernel modules
#
# Requires: find
#
#%no_install_post_compress_modules	1
%__spec_install_post_compress_modules { \
%{!?no_install_post_compress_modules: __spec_install_post_compress_modules() { \
	if [ -d $RPM_BUILD_ROOT/lib/modules ]; then \
		q=$(find $RPM_BUILD_ROOT/lib/modules -name '*o' -type f -print); \
		if [ "$q" ]; then \
			printf "Compress %d kernel modules..." $(echo "$q" | wc -l); \
			echo "$q" | xargs -r %{__gzip} -9nf; \
			echo "DONE"; \
			find $RPM_BUILD_ROOT/lib/modules -name '*o' -type l -printf "%p %l\n" | \
			while read a b; do ln -sf $b.gz $a.gz; rm -f $a; done; \
		fi; \
	fi; \
}; __spec_install_post_compress_modules } }

# Remove common Perl files we don't package
%__spec_install_post_perl_clean {\
%{!?no_install_post_perl_clean: \
%{?pdir:rm -f $RPM_BUILD_ROOT{%{perl_archlib}/perllocal.pod,%{perl_vendorarch}/auto/%{pdir}%{?pnam:/%(echo %{pnam} | tr - /)}/.packlist}} \
} }

#-----------------------------------------------------------------
# Update GConf2 schemas
#
# Requires: GConf2
#
%gconf_schema_install() \
	umask 022; \
	GCONF_CONFIG_SOURCE="xml:readwrite:/etc/gconf/gconf.xml.defaults" \\\
	/usr/bin/gconftool-2 --makefile-install-rule /etc/gconf/schemas/%{?1}%{!?1:*.schemas} > /dev/null; \
%{nil}

%gconf_schema_uninstall() \
if [ $1 = 0 -a -x /usr/bin/gconftool-2 ]; then \
	umask 022; \
	GCONF_CONFIG_SOURCE="xml:readwrite:/etc/gconf/gconf.xml.defaults" \\\
	/usr/bin/gconftool-2 --makefile-uninstall-rule /etc/gconf/schemas/%{?1} > /dev/null \
fi; \
%{nil}

#-----------------------------------------------------------------
# Update desktop MIME database
# requires: desktop-file-utils
%update_desktop_database() {{ \
	umask 022; \
	/usr/bin/update-desktop-database -q; \
};} \
%{nil}

%update_desktop_database_post %update_desktop_database

%update_desktop_database_postun() {{ \
if [ "$1" = "0" ]; then \
	%update_desktop_database \
fi; \
};} \
%{nil}

#-----------------------------------------------------------------
# Update shared MIME info database
# requires: shared-mime-info
#
%update_mime_database() {{ \
	umask 022; \
	/usr/bin/update-mime-database %{_datadir}/mime; \
};} \
%{nil}

#-----------------------------------------------------------------
# Update icon cache
# requires: gtk+
#
%update_icon_cache() {{ \
	umask 022; \
	/usr/bin/gtk-update-icon-cache -qf %{_datadir}/icons/%1; \
};} \
%{nil}

#-----------------------------------------------------------------
# Update scrollkeeper database
# requires: scrollkeeper
#
%scrollkeeper_update_post() \
	/usr/bin/scrollkeeper-update -q; \
%{nil}

%scrollkeeper_update_postun() \
if [ "$1" = "0" ]; then \
	/usr/bin/scrollkeeper-update -q; \
fi; \
%{nil}

#-----------------------------------------------------------------
# post %install sequence:
# - autodeps exceptions
# - compress all man and info pages,
# - strip all ELF executables and ELF shared objects if not %debug.
# - compress kernel modules if any

###################################################################
# Requires/Provides automation
# exceptions system by Jacek Konieczny <jajcus@pld-linux.org>
#
%__noautoreqfiles	%(sed -e s'/#.*//' /etc/rpm/noautoreqfiles)%{?_noautoreqfiles: %{_noautoreqfiles}}
%__noautoprovfiles	%(sed -e s'/#.*//' /etc/rpm/noautoprovfiles)%{?_noautoprovfiles: %{_noautoprovfiles}}
%__noautoreq		%(sed -e s'/#.*//' /etc/rpm/noautoreq)%{?_noautoreq: %{_noautoreq}}
%__noautoreqdep		%(sed -e s'/#.*//' /etc/rpm/noautoreqdep)%{?_noautoreqdep: %{_noautoreqdep}}
%__noautoprov		%(sed -e s'/#.*//' /etc/rpm/noautoprov)%{?_noautoprov: %{_noautoprov}}

#%_noautocompressdoc	%{nil}
#
%_missing_doc_files_terminate_build	1%{nil}
%_unpackaged_files_terminate_build	%{nil}
# (X)emacs support
%___emacs_lispdir_helper  -batch -q -eval '(while load-path (princ (concat (car load-path) "\\n")) (setq load-path (cdr load-path)))' 2> /dev/null|sed -n '/\\(.*\\/x\\?emacs\\/site-lisp\\)\\/\\?$/{s,,\\1,p;q;}'
%_emacs_lispdir %{expand:%%global _emacs_lispdir %(Z=$(emacs %___emacs_lispdir_helper); echo ${Z:-ERROR})}%_emacs_lispdir
%_xemacs_lispdir %{expand:%%global _xemacs_lispdir %(Z=$(xemacs %___emacs_lispdir_helper); echo ${Z:-ERROR})}%_xemacs_lispdir

%__php_provides	%{nil}
%__php_requires %{nil}
%__perl_provides %{nil}
%__perl_requires %{nil}
%__mono_provides %{nil}
%__mono_requires %{nil}

# Perl specific macro definitions.
%perl_privlib		%{expand:%%global perl_privlib %(eval $(%{__perl} -V:installprivlib 2>/dev/null); echo ${installprivlib:-ERROR})}%perl_privlib
%perl_archlib		%{expand:%%global perl_archlib %(eval $(%{__perl} -V:installarchlib 2>/dev/null); echo ${installarchlib:-ERROR})}%perl_archlib
%perl_vendorlib		%{expand:%%global perl_vendorlib %(eval $(%{__perl} -V:installvendorlib 2>/dev/null); echo ${installvendorlib:-ERROR})}%perl_vendorlib
%perl_vendorarch	%{expand:%%global perl_vendorarch %(eval $(%{__perl} -V:installvendorarch 2>/dev/null); echo ${installvendorarch:-ERROR})}%perl_vendorarch
%perl_sitelib		%{expand:%%global perl_sitelib %(eval $(%{__perl} -V:installsitelib 2>/dev/null); echo ${installsitelib:-ERROR})}%perl_sitelib
%perl_sitearch		%{expand:%%global perl_sitearch %(eval $(%{__perl} -V:installsitearch 2>/dev/null); echo ${installsitearch:-ERROR})}%perl_sitearch

# Ruby
%__ruby				/usr/bin/ruby
%ruby_archdir		%{expand:%%global ruby_archdir %(%{__ruby} -r rbconfig -e 'print Config::CONFIG["archdir"]' 2>/dev/null || echo ERROR)}%ruby_archdir
%ruby_ridir			%{expand:%%global ruby_ridir %(%{__ruby} -r rbconfig -e 'include Config; print File.join(CONFIG["datadir"], "ri", CONFIG["ruby_version"], "system")' 2>/dev/null || echo ERROR)}%ruby_ridir
%ruby_rubylibdir	%{expand:%%global ruby_rubylibdir %(%{__ruby} -r rbconfig -e 'print Config::CONFIG["rubylibdir"]' 2>/dev/null || echo ERROR)}%ruby_rubylibdir
%ruby_vendorarchdir	%{expand:%%global ruby_vendorarchdir %(%{__ruby} -r rbconfig -e 'print Config::CONFIG["vendorarchdir"]' 2>/dev/null || echo ERROR)}%ruby_vendorarchdir
%ruby_vendorlibdir	%{expand:%%global ruby_vendorlibdir %(%{__ruby} -r rbconfig -e 'print Config::CONFIG["vendorlibdir"]' 2>/dev/null || echo ERROR)}%ruby_vendorlibdir
%ruby_sitearchdir	%{expand:%%global ruby_sitearchdir %(%{__ruby} -r rbconfig -e 'print Config::CONFIG["sitearchdir"]' 2>/dev/null || echo ERROR)}%ruby_sitearchdir
%ruby_sitelibdir	%{expand:%%global ruby_sitelibdir %(%{__ruby} -r rbconfig -e 'print Config::CONFIG["sitelibdir"]' 2>/dev/null || echo ERROR)}%ruby_sitelibdir
%ruby_rdocdir		/usr/share/rdoc
%ruby_version		%{expand:%%global ruby_version %(%{__ruby} -r rbconfig -e 'print Config::CONFIG["ruby_version"]' 2>/dev/null || echo ERROR)}%ruby_version
%ruby_ver_requires_eq	Requires:	ruby(ver) = %ruby_version
%ruby_mod_ver_requires_eq	Requires:	ruby-modules(ver) = %ruby_version

%php_pear_dir		/usr/share/pear
%php_data_dir		/usr/share/php
%php_extensiondir	%{expand:%%global php_extensiondir %(php-config --extension-dir 2>/dev/null || echo ERROR)}%php_extensiondir
%php_sysconfdir		%{expand:%%global php_sysconfdir %(php-config --sysconfdir 2>/dev/null || echo ERROR)}%php_sysconfdir
%php_includedir		%{expand:%%global php_includedir %(php-config --include-dir 2>/dev/null || echo ERROR)}%php_includedir

# extract php/zend api versions
%php_major_version		%{expand:%%global php_major_version %(awk '/#define PHP_MAJOR_VERSION/{print $3}' %{php_includedir}/main/php_version.h 2>/dev/null || echo ERROR)}%php_major_version
%php_api_version		%{expand:%%global php_api_version %(awk '/#define PHP_API_VERSION/{print $3}' %{php_includedir}/main/php.h 2>/dev/null || echo ERROR)}%php_api_version
%php_pdo_api_version	%{expand:%%global php_pdo_api_version %(awk '/#define PDO_DRIVER_API/{print $3}' %{php_includedir}/ext/pdo/php_pdo_driver.h 2>/dev/null || echo ERROR)}%php_pdo_api_version
%php_debug				%{expand:%%global php_debug %(awk '/#define ZEND_DEBUG/{print $3}' %{php_includedir}/main/php_config.h 2>/dev/null || echo ERROR)}%php_debug
%zend_module_api		%{expand:%%global zend_module_api %(awk '/#define ZEND_MODULE_API_NO/{print $3}' %{php_includedir}/Zend/zend_modules.h 2>/dev/null || echo ERROR)}%zend_module_api
%zend_extension_api		%{expand:%%global zend_extension_api %(awk '/#define ZEND_EXTENSION_API_NO/{print $3}' %{php_includedir}/Zend/zend_extensions.h 2>/dev/null || echo ERROR)}%zend_extension_api
%zend_zts				%{expand:%%global zend_zts %(Z=$(grep -sc '^#define ZTS 1' %{php_includedir}/main/php_config.h); echo ${Z:-ERROR})}%zend_zts

# helper macro
%__php_api_requires(v:) Requires: php%{-v*}(%{expand:%1}) = %{expand:%{%{!?2:%{1}}%{?2}}}

# macros for public use
# for php extensions (php-pecl)
%requires_php_extension %{__php_api_requires modules_api php_api_version} \
%{__php_api_requires zend_module_api} \
%{__php_api_requires -v %php_major_version debug php_debug} \
%{__php_api_requires -v %php_major_version thread-safety zend_zts}

# for zend extensions
%requires_zend_extension %{__php_api_requires zend_module_api} \
%{__php_api_requires zend_extension_api} \
%{__php_api_requires -v %php_major_version debug php_debug} \
%{__php_api_requires -v %php_major_version thread-safety zend_zts}

# for php pdo modules (php-pecl-PDO_*)
%requires_php_pdo_module %{__php_api_requires PDO_API php_pdo_api_version}

# for using PHP post scripts. for PHP >= 5.0
%php_webserver_restart \
[ ! -f /etc/apache/conf.d/??_mod_php.conf ] || %service -q apache restart \
[ ! -f /etc/httpd/conf.d/??_mod_php.conf ] || %service -q httpd restart \
if [ -f /etc/rc.d/init.d/php-fcgi ]; then \
	PHP_FCGI_BINARY=; . /etc/sysconfig/php-fcgi 2>/dev/null \
	if [[ ${PHP_FCGI_BINARY:-php.fcgi} = *php.fcgi* ]]; then \
		%service -q php-fcgi restart \
	fi \
fi \
%{nil}

# for using php post scripts. for PHP >= 4.0 && PHP < 5.0
%php4_webserver_restart \
[ ! -f /etc/apache/conf.d/??_mod_php4.conf ] || %service -q apache restart \
[ ! -f /etc/httpd/conf.d/??_mod_php4.conf ] || %service -q httpd restart \
if [ -f /etc/rc.d/init.d/php-fcgi ]; then \
	PHP_FCGI_BINARY=; . /etc/sysconfig/php-fcgi 2>/dev/null \
	if [[ ${PHP_FCGI_BINARY:-php.fcgi} = *php4.fcgi* ]]; then \
		%service -q php-fcgi restart \
	fi \
fi \
%{nil}

# X.org helper macros
%__xorg_abi_requires_ge() Requires: xorg-xserver-server(%{expand:%1}-abi) >= %{expand:%{%2}}
%__xorg_abi_requires_lt() Requires: xorg-xserver-server(%{expand:%1}-abi) < %(awk -vv=%{expand:%{%2}} 'BEGIN{split(v, a, "."); printf("%s.0", a[1] + 1); exit}')

%xorg_xserver_ansic_abi		%{expand:%%global xorg_xserver_ansic_abi %(awk '/#define ABI_ANSIC_VERSION/ { split($0,A,/[(,)]/); printf("%d.%d",A[2], A[3]); }' /usr/include/xorg/xf86Module.h 2> /dev/null || echo ERROR)}%xorg_xserver_ansic_abi
%xorg_xserver_extension_abi	%{expand:%%global xorg_xserver_extension_abi %(awk '/#define ABI_EXTENSION_VERSION/ { split($0,A,/[(,)]/); printf("%d.%d",A[2], A[3]); }' /usr/include/xorg/xf86Module.h 2> /dev/null || echo ERROR)}%xorg_xserver_extension_abi
%xorg_xserver_font_abi		%{expand:%%global xorg_xserver_font_abi %(awk '/#define ABI_FONT_VERSION/ { split($0,A,/[(,)]/); printf("%d.%d",A[2], A[3]); }' /usr/include/xorg/xf86Module.h 2> /dev/null | echo ERROR)}%xorg_xserver_font_abi
%xorg_xserver_videodrv_abi	%{expand:%%global xorg_xserver_videodrv_abi %(awk '/#define ABI_VIDEODRV_VERSION/ { split($0,A,/[(,)]/); printf("%d.%d",A[2], A[3]); }' /usr/include/xorg/xf86Module.h 2> /dev/null || echo ERROR)}%xorg_xserver_videodrv_abi
%xorg_xserver_xinput_abi	%{expand:%%global xorg_xserver_xinput_abi %(awk '/#define ABI_XINPUT_VERSION/ { split($0,A,/[(,)]/); printf("%d.%d",A[2], A[3]); }' /usr/include/xorg/xf86Module.h 2> /dev/null || echo ERROR)}%xorg_xserver_xinput_abi

%requires_xorg_xserver_extension \
%{__xorg_abi_requires_ge ansic xorg_xserver_ansic_abi} \
%{__xorg_abi_requires_lt ansic xorg_xserver_ansic_abi} \
%{__xorg_abi_requires_ge extension xorg_xserver_extension_abi} \
%{__xorg_abi_requires_lt extension xorg_xserver_extension_abi} \
%{nil}

%requires_xorg_xserver_xinput \
%{__xorg_abi_requires_ge ansic xorg_xserver_ansic_abi} \
%{__xorg_abi_requires_lt ansic xorg_xserver_ansic_abi} \
%{__xorg_abi_requires_ge xinput xorg_xserver_xinput_abi} \
%{__xorg_abi_requires_lt xinput xorg_xserver_xinput_abi} \
%{nil}

%requires_xorg_xserver_font \
%{__xorg_abi_requires_ge ansic xorg_xserver_ansic_abi} \
%{__xorg_abi_requires_lt ansic xorg_xserver_ansic_abi} \
%{__xorg_abi_requires_ge font xorg_xserver_font_abi} \
%{__xorg_abi_requires_lt font xorg_xserver_font_abi} \
%{nil}

%requires_xorg_xserver_videodrv \
%{__xorg_abi_requires_ge ansic xorg_xserver_ansic_abi} \
%{__xorg_abi_requires_lt ansic xorg_xserver_ansic_abi} \
%{__xorg_abi_requires_ge videodrv xorg_xserver_videodrv_abi} \
%{__xorg_abi_requires_lt videodrv xorg_xserver_videodrv_abi} \
%{nil}

# Python specific macro definitions.
# python main version
%py_ver			%{expand:%%global py_ver %(%{__python} -c "import sys; print sys.version[:3]" 2>/dev/null || echo ERROR)}%py_ver

# directories
%py_prefix		%{expand:%%global py_prefix %(%{__python} -c "import sys; print sys.prefix" 2>/dev/null || echo ERROR)}%py_prefix
%py_libdir		%{py_prefix}/%{_lib}/python%{py_ver}
%py_scriptdir	%{py_prefix}/share/python%{py_ver}
%py_incdir		/usr/include/python%{py_ver}
%py_sitedir		%{py_libdir}/site-packages
%py_sitescriptdir %{py_scriptdir}/site-packages
%py_dyndir		%{py_libdir}/lib-dynload

# pure python modules compilation
%py_comp		python -c "import compileall; import sys; compileall.compile_dir(sys.argv[1], ddir=sys.argv[1][len('$RPM_BUILD_ROOT'):])"

%py_ocomp		python -O -c "import compileall; import sys; compileall.compile_dir(sys.argv[1], ddir=sys.argv[1][len('$RPM_BUILD_ROOT'):])"

# Software written in Python language require Python with main version
%pyrequires_eq() Requires:	%1

# Hardlink binary identical .pyc and .pyo files
%__spec_install_post_py_hardlink {\
%{!?no_install_post_py_hardlink: __spec_install_post_py_hardlink() { \
local a b c=0 t=0; \
if [ -d "$RPM_BUILD_ROOT" ]; then \
	find "$RPM_BUILD_ROOT" -name '*.pyc' > __rpm_pyc; \
	while read a; do \
		b="${a%.pyc}.pyo"; \
		if cmp -s "$a" "$b"; then \
			ln -f "$a" "$b"; \
			c=$((c + 1)); \
		fi; \
		t=$((t + 1)); \
	done < __rpm_pyc; \
	[ $t -gt 0 ] && printf "Hardlink Python files: %d/%d files hardlinked\n" $c $t; \
	rm -f __rpm_pyc; \
fi; \
}; __spec_install_post_py_hardlink } }

# remove python sources, so that check-files won't complain
%py_postclean() \
for d in %{py_sitescriptdir} %{py_sitedir} %*; do \
 [ ! -d "$RPM_BUILD_ROOT$d" ] || find "$RPM_BUILD_ROOT$d" -name '*.py' -print0 | xargs -0r -l512 rm;\
done \
%{nil}

# depmod macro
%depmod() { \
umask 022; \
if [ -e /boot/System.map-%1 ]; then \
	/sbin/depmod -a -F /boot/System.map-%1 %1; \
else \
	if [ -e /boot/System.map ]; then \
		/sbin/depmod -a -F /boot/System.map %1; \
	else \
		/sbin/depmod -a %1; \
	fi \
fi; \
}

# XMMS specific macros
%xmms_prefix			%{expand:%%global xmms_prefix %(xmms-config --prefix 2>/dev/null || echo ERROR)}%xmms_prefix
%xmms_exec_prefix		%{expand:%%global xmms_exec_prefix %(xmms-config --exec-prefix 2>/dev/null || echo ERROR)}%xmms_exec_prefix
%xmms_version			%{expand:%%global xmms_version %(xmms-config --version 2>/dev/null || echo ERROR)}%xmms_version
%xmms_datadir			%{expand:%%global xmms_datadir %(xmms-config --data-dir 2>/dev/null || echo ERROR)}%xmms_datadir
%xmms_plugindir			%{expand:%%global xmms_plugindir %(xmms-config --plugin-dir 2>/dev/null || echo ERROR)}%xmms_plugindir
%xmms_visualization_plugindir	%{expand:%%global xmms_visualization_plugindir %(xmms-config --visualization-plugin-dir 2>/dev/null || echo ERROR)}%xmms_visualization_plugindir
%xmms_input_plugindir		%{expand:%%global xmms_input_plugindir %(xmms-config --input-plugin-dir 2>/dev/null || echo ERROR)}%xmms_input_plugindir
%xmms_output_plugindir		%{expand:%%global xmms_output_plugindir %(xmms-config --output-plugin-dir 2>/dev/null || echo ERROR)}%xmms_output_plugindir
%xmms_effect_plugindir		%{expand:%%global xmms_effect_plugindir %(xmms-config --effect-plugin-dir 2>/dev/null || echo ERROR)}%xmms_effect_plugindir
%xmms_general_plugindir		%{expand:%%global xmms_general_plugindir %(xmms-config --general-plugin-dir 2>/dev/null || echo ERROR)}%xmms_general_plugindir

%_target_base_arch	%{expand:%%global _target_base_arch %(echo %{_target_cpu} | sed 's/i.86/i386/;s/athlon/i386/;s/pentium./i386/;s/amd64/x86_64/;s/ia32e/x86_64/')}%_target_base_arch

# user/group checking macros
#
# Usage:
#	%userremove myuser
#
%userremove	/usr/lib/rpm/user_group.sh user del
%groupremove	/usr/lib/rpm/user_group.sh group del
#
# Usage:
#	if %usertestrm myuser; then
#		/usr/sbin/userdel -r myuser
# Note:
#	use these macros only if you need to call userdel/groupdel with
#	a non-standard option or take an extra action; otherwise use the
#	%userremove/%groupremove macros
#
%usertestrm	/usr/lib/rpm/user_group.sh user testrm
%grouptestrm	/usr/lib/rpm/user_group.sh group testrm
# user group membership management macros
#
# Usage:
#	%addusertogroup myuser agroup
#
%addusertogroup	/usr/lib/rpm/user_group.sh user addtogroup

# banner support (useful in {pre,post}{,un} and triggers)
#
# Usage:
#	%banner name [-a] [-e] [-n] [-tn] <<EOF
# the banner text, the banner text
# the banner text, and following line
#EOF
# You can use any form of here-document, <<'EOF' <<-EOT will do.
# NOTE: if your use "<<-EOF", then You can actually indent inside here-document.
#
# -a   - append to the banner
# -e   - send to stderr instead of stdout
# -n   - no show banner (overrides -t)
# -t   - show only, if RPM_SCRIPTVERBOSITY >= n; default n=5
#
# Tests:
# (rpm -E '%banner -e banner <<EOF'; echo -e 'hi\nEOF') > m; sh -x m
# rpm -E 'date | %banner -e banner' > m; sh -x m
#
%banner(aent:) ( \
RPM_SCRIPTVERBOSITY=5 \
[ -r /etc/sysconfig/rpm ] && . /etc/sysconfig/rpm \
if [ -x /usr/bin/banner.sh ]; then \
	CMD="/usr/bin/banner.sh %{-e:--stderr} %{!-n:$([ $RPM_SCRIPTVERBOSITY -ge %{-t:%{-t*}}%{!-t:5} ] && echo -s)} %{!-a:-m}%{-a:-M} %1" \
else \
	CMD="cat%{-e: >&2}" \
fi \
eval $CMD %{?2:%2}%{?3: %3}) \
%{nil}

# useradd/groupadd macros
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# Usage:
#   %useradd [-P package] [-u uid] [-d home_dir] [-s shell] [-c comment]
#   [-g initial_group] [-G group[,...]] login
#
#  -u uid. REQUIRED
#  -g gid/group. REQUIRED
#  -s defaults to /bin/false
#  -d defaults to /usr/share/empty
#  -c No default
#  -r is accepted but ignored (it's always set)
#  -k skeleton dir. defaults to /usr/share/empty
# rpm specific flags
#  -P package name. defaults to %{name}
#
%useradd(c:d:e:f:g:G:Mmk:op:s:u:rP:) \
%{!-u:%{error:useradd: Required argument -u missing}} \
%{!-g:%{error:useradd: Required argument -g missing}} \
%{!?1:%{error:useradd: Required parameter login missing}} \
if [ -n "`/bin/id -u %{expand:%{%{#}}} 2>/dev/null`" ]; then \
	if [ "`/bin/id -u %{expand:%{%{#}}}`" != "%{-u*}" ]; then \
		echo "Error: user %{expand:%{%{#}}} doesn't have uid=%{-u*}. Correct this before installing %{-P*}%{!?-P:%{name}}." 1>&2 \
		exit 1 \
	fi \
else \
	echo "Adding user %{expand:%{%{#}}} UID=%{-u*}." \
	/usr/sbin/useradd \\\
		%{-m:-m -k %{-k*}%{!-k:/usr/share/empty}} \\\
		-u %{-u*} \\\
		-r \\\
		-d %{-d*}%{!-d:/usr/share/empty} \\\
		-s %{-s*}%{!-s:/bin/false} \\\
		%{-c:-c "%(set -- %{-c*} %{*}; echo $1)"}\\\
		-g %{-g*} \\\
		%{-M} \\\
		%{-G:-G %{-G*}} \\\
		%{expand:%{%{#}}} 1>&2 || exit $? \
	[ ! -x /usr/sbin/nscd ] || /usr/sbin/nscd -i passwd || : \
fi;

# Usage:
#   %groupadd [-P package] [-g gid] group
#
# -g gid. REQUIRED
#
# Sample:
#   %groupadd -P %{name}-base -g %{gid} %{name}

%groupadd(g:P:rfo)	\
%{!-g:%{error:groupadd: Required argument -g missing}} \
%{!?1:%{error:groupadd: Required parameter group missing}} \
if /usr/bin/getgid %{1} > /dev/null 2>&1; then \
	if [ "`/usr/bin/getgid %{1}`" != "%{-g*}" ]; then \
		echo "Error: group %{1} doesn't have gid=%{-g*}. Correct this before installing %{-P*}%{!?-P:%{name}}." 1>&2 \
		exit 1 \
	fi \
else \
	echo "Adding group %{1} GID=%{-g*}." \
	/usr/sbin/groupadd -g %{-g*} -r %{1} 1>&2 || exit $? \
	[ ! -x /usr/sbin/nscd ] || /usr/sbin/nscd -i group || : \
fi;

# webapp macros
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# The config is installed/removed inside trigger, this means that you can any
# time install apache1/apache/lighttpd package and the configuration file is
# updated. if you don't need the config for various reason for specific
# webserver, just remove the symlink from config directory using webapp
# program. the trigger will not recreate the symlink on upgrades. In other
# words the config is linked to webserver config directory on first install of
# PACKAGE or WEBSERVER.
#
# Add package's webserver config to webserver webapps dir.
# Usage:
#   %webapp_register WEBSERVER WEBAPP
#
%webapp_register() \
%{?debug:set -x; echo "webapp_register: %{name}-%{version}-%{release} 1:[$1]; 2:[$2]"} \
if [ "$1" = "1" ] && [ "$2" = "1" ]; then\
	/usr/sbin/webapp register %1 %2\
fi\
# reload webserver if the config symlink is there and skip reload if webserver is upgraded\
if [ -L /etc/%1/webapps.d/%(echo "%2" | tr '/' '-').conf ] && [ "$2" -lt "2" ]; then\
	%{expand:%service -q %%1 reload}\
fi\
%{nil}

# Remove package's config from webserver webapps dir.
# Usage:
#   %webapp_register [-f] WEBSERVER WEBAPP
%webapp_unregister(f) \
%{?debug:set -x; echo "webapp_unregister: %{name}-%{version}-%{release}: 1:[$1]; 2:[$2]"} \
# remove link if either of the packages are gone \
if [ -n "%{-f:1}" ] || [ "$1" = "0" ] || [ "$2" = "0" ] && [ -L /etc/%1/webapps.d/%(echo "%2" | tr '/' '-').conf ]; then \
	/usr/sbin/webapp unregister %1 %2\
	%{expand:%service -q %%1 reload}\
fi \
%{nil}

# service macro.
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# calls usual service restart on package %post, but skips the restart if
# administrator has disabled automatic service restarts in either global
# /etc/sysconfig/rpm or per service /etc/sysconfig/SERVICE file.
#
# Usage:
#   %service [-q] [-n] SERVICE ACTION ["SERVICE NICE DESCRIPTION"]
#
#  -q be silent when service isn't started (for scriplets restaring other package's services)
#  -n NOOP mode, do not actually restart service
#
# Requirements:
# BuildRequires:	rpmbuild(macros) >= 1.268
# Requires:	rc-scripts
# -n option:
# BuildRequires:	rpmbuild(macros) >= 1.450
%service(qn) {{%(export noop=%{-n:1} quiet=%{-q:1}; /usr/lib/rpm/service_generator.sh %{*}) };}


# Java macros. based on jpackage macros.java
#
# Root directory where all Java VMs/SDK/JREs are installed.
%_jvmdir		%{_libdir}/jvm

# Root directory where all Java VMs/SDK/JREs expose their jars
%_jvmjardir		%{_libdir}/jvm-exports

# Root directory for all Java VM/SDK/JRE's private things.
%_jvmprivdir	%{_libdir}/jvm-private

# Root directory for all architecture dependent parts of Java VM/SDK/JRE's
%_jvmlibdir		%{_libdir}/jvm

# Root directory for all architecture independent parts of Java VM/SDK/JRE's
%_jvmdatadir	%{_datadir}/jvm

# Root directory for all configurations parts of Java VM/SDK/JRE's
%_jvmsysconfdir	%{_sysconfdir}/jvm

# Root directory for all common architecture dependent parts of Java VM/SDK/JRE's
%_jvmcommonlibdir	%{_libdir}/jvm-common

# Root directory for all common architecture independent parts of Java VM/SDK/JRE's
%_jvmcommondatadir	%{_datadir}/jvm-common

# Root directory for all common configurations parts of Java VM/SDK/JRE's
%_jvmcommonsysconfdir	%{_sysconfdir}/jvm-common

# Directory where arch-specific (JNI) version-independent jars are installed.
%_jnidir		%{_libdir}/java

%java_home		%{expand:%%global java_home %([ -f %{_javadir}-utils/java-functions ] || { echo ERROR; exit 0; }; unset JAVA_HOME; . %{_javadir}-utils/java-functions; set_jvm; echo ${JAVA_HOME:-ERROR})}%java_home

%ant			JAVA_HOME=%{java_home} CLASSPATH=$CLASSPATH ant
%jar			%{java_home}/bin/jar
%java			%{expand:%%global java %([ -f %{_javadir}-utils/java-functions ] || { echo ERROR; exit 0; }; unset JAVACMD; . %{_javadir}-utils/java-functions; set_javacmd; echo $JAVACMD)}%java
%javac			%{java_home}/bin/javac
%javadoc		%{java_home}/bin/javadoc

%add_jvm_extension	JAVA_LIBDIR=%{buildroot}/%{_javadir}	%{_bindir}/jvmjar -l

%jpackage_script() \
install -d $RPM_BUILD_ROOT%{_bindir}\
cat > $RPM_BUILD_ROOT%{_bindir}/%5 << 'EOF' \
#!/bin/sh\
#\
# %{name} script\
# JPackage Project <http://www.jpackage.org/>\
\
# Source functions library\
. %{_javadir}-utils/java-functions\
\
# Source system prefs\
if [ -f %{_sysconfdir}/java/%{name}.conf ]; then\
    . %{_sysconfdir}/java/%{name}.conf\
fi\
\
# Source user prefs\
if [ -f $HOME/.%{name}rc ]; then\
    . $HOME/.%{name}rc\
fi\
\
# Configuration\
MAIN_CLASS=%1\
BASE_FLAGS=%2\
BASE_OPTIONS=%3\
BASE_JARS="%(echo %4 | tr ':' ' ')"\
\
# Set parameters\
set_jvm\
set_classpath $BASE_JARS\
set_flags $BASE_FLAGS\
set_options $BASE_OPTIONS\
\
# Let's start\
run "$@"\
EOF

# jpackage 1.7
# Directory for maven depmaps
#
%_mavendepmapdir /etc/maven
%_mavendepmapfragdir /etc/maven/fragments

#
# add_to_depmap adds an entry to the depmap. The arguments are:
#
# %1 the original groupid
# %2 the original artifact id
# %3 the version
# %4 the new groupid
# %5 the new artifactid
#

%add_to_maven_depmap() \
install -dm 755 $RPM_BUILD_ROOT/%{_mavendepmapfragdir}\
cat >>$RPM_BUILD_ROOT/%{_mavendepmapfragdir}/%{name}<< EOF\
<dependency>\
    <maven>\
        <groupId>%1</groupId>\
        <artifactId>%2</artifactId>\
        <version>%3</version>\
    </maven>\
    <jpp>\
        <groupId>%4</groupId>\
        <artifactId>%5</artifactId>\
        <version>%3</version>\
    </jpp>\
</dependency>\
\
EOF\
%{nil}

#==============================================================================
#
# update_maven_depmap updates the main maven depmap
#
%update_maven_depmap() \
echo -e "<dependencies>\\n" > %{_mavendepmapdir}/maven2-depmap.xml\
if [ -d %{_mavendepmapfragdir} ] && [ -n "`find %{_mavendepmapfragdir} -type f`" ]; then\
cat %{_mavendepmapfragdir}/* >> %{_mavendepmapdir}/maven2-depmap.xml\
fi\
echo -e "</dependencies>\\n" >> %{_mavendepmapdir}/maven2-depmap.xml


# PEAR install macros
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# Usage:
#	%%pear_package_setup ...
#
# -a #   - also unpack SOURCE#. for PEAR bootstrapping
# -n FMT - create builddir with FMT, instead of default %%{_pearname}-%%{version}
# -z     - unpack pear package and let pear use package.xml (not tarball) for install. for PEAR bootstrapping
# -D     - pass -D to %setup (so the build dir is not removed)
# -c     - register channel from local channel.xml file
#
# unpack PEAR package to %%{_builddir}/FMT. package is extracted with already
# destination hierarchy. you should copy the tree to buildroot after
# patching/reorganizing with %%pear_package_install.
#
# additionally BUILDROOT is stripped from files and files are converted to UNIX
# line endings.
#
# the pear install process output is recorded to install.log, you should put it
# to %%doc for later debug or just for information.
#
# additionally additional-packages.txt is produced if it was detected that the
# package has optional dependencies. the file format is suitable of displaying
# in %%post of a package. you should put this file to %%doc. noautocompressdoc is
# automatically added for this file.


# records install.log and transforms PEAR names to PLD Linux rpm package names.
%__pear_install_log \
tee install.log \
# make post message of optional packages \
grep 'can optionally use' install.log | sed -e 's,package "pear/,package "php-pear-,g;s,^pear/,php-pear-,;s,^pear/,php-pear-,;s,^channel://.*/,,' > optional-packages.txt \
if [ -s optional-packages.txt ]; then \
	awk -F'"' '/use package/{print $2}' optional-packages.txt | sed -e "s,_,/,g;s,php-pear-, 'pear(,;s,$,.*)'," | tr -d '\\\n' > _noautoreq \
else \
	rm -f optional-packages.txt \
fi \
%{nil}

# command invoking pear cli
%__pear /usr/bin/pear

%pear_install(a:n:zD) \
%__pear \\\
	-c %{builddir}/pearrc \\\
	-d doc_dir=/docs \\\
	-d temp_dir=/tmp \\\
	-d php_dir=%{-c:%{builddir}/}%{php_pear_dir} \\\
	-d bin_dir=%{_bindir} \\\
	-d data_dir=%{php_pear_dir}/data \\\
	-d test_dir=%{php_pear_dir}/tests \\\
	install \\\
	--packagingroot=%{builddir} \\\
	--offline \\\
	--nodeps \\\
	%{-f:--force} \\\
	%{!-z:%{S:%{-a*}%{!-a:0}}}%{-z:$_P} > .install.log || { c=$?; cat .install.log; exit $c; }; \
	%{-c:cp -a %{builddir}/%{builddir}/%{php_pear_dir} %{builddir}/%(dirname %{php_pear_dir}); rm -rf %{builddir}/%{builddir}; } \
%{nil}

# The main macro.
# using this macro will append optional-packages.txt to the nocompressdoc list
# as it's displayed to user after package install. and adding additional gzip
# dep is just waste ;)
%pear_package_setup(a:n:zDc:) \
%define srcdir %{-n*}%{!-n:%{_pearname}-%{version}} \
%define builddir %{_builddir}/%{srcdir} \
%setup -q -c -T %{-D:-D} -n %{srcdir} \
%{-z:tar zxf %{S:0}; %{-a:tar zxf %{S:%{-a*}}}} \
%{-z:_P=package2.xml; [ -f $_P ] || _P=package.xml; _N=%{srcdir}; mv $_P $_N; cd $_N} \
%{-c:%{__pear} -c pearrc config-set php_dir %{builddir}/%{php_pear_dir}; %__pear -c %{builddir}/pearrc channel-add %{-c*}} \
%pear_install \
%{-z:cd ..} \
cat %{-z:$_N/}.install.log | %__pear_install_log \
\
# undos sources \
find -type f -print0 | xargs -0 sed -i -e 's,\\r$,,' \
%{!?_noautocompressdoc:%global _noautocompressdoc %{nil}}%{expand:%%global _noautocompressdoc %{_noautocompressdoc} optional-packages.txt} \
%{!?_noautoprov:%global _noautoprov %{nil}}%{expand:%%global _noautoprov %{_noautoprov} 'pear(tests/.*)'} \
%{nil}

# Copies exctracted PEAR package structure and PEAR registry to buildroot.
# Author: Elan Ruusamäe <glen@pld-linux.org>
%pear_package_install() \
cp -a ./%{php_pear_dir}/{.registry,*} $RPM_BUILD_ROOT%{php_pear_dir} \
find $RPM_BUILD_ROOT%{php_pear_dir} '(' -name '*~' -o -name '*.orig' ')' | xargs -r rm -v \
# help the developer out a little: \
if [ -f _noautoreq ]; then \
	echo "AutoReqdep detected:" \
	echo "_noautoreq $(cat _noautoreq)" \
fi \
%{nil}


# Register OpenLDAP schema.
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# Usage:
#   %%openldap_schema_register [-d core,nis] %{schemadir}/horde.schema
#
#  -d specify dependant schemas, separated by comma
#
%openldap_schema_register(d:) \
for schema in %*; do \
	if ! grep -q "$schema" /etc/openldap/slapd.conf; then \
		%{__sed} -i -e " \
			/^include.*local.schema/{ \
				iinclude\\t	$schema\
			} \
		" /etc/openldap/slapd.conf \
	fi \
done \
# enable dependant schemas \
if [ "%{-d*}" ]; then \
	%{__sed} -i -e ' \
	/^#include.*\\(%(echo '%{-d*}' | %{__sed} -e 's/,/\\\\|/g')\\)\\.schema/{ \
		s/^#// \
	}' /etc/openldap/slapd.conf \
fi \
%{nil}

# Unregister OpenLDAP schema.
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# Usage:
#   %%openldap_schema_unregister %{schemadir}/horde.schema
#
%openldap_schema_unregister() \
for schema in %*; do \
	if grep -q "$schema" /etc/openldap/slapd.conf; then \
		%{__sed} -i -e " \
		/^include.*$(echo "$schema" | %{__sed} -e 's,/,\\\\/,g')/d \
		# for symmetry it would be nice if we disable enabled schemas in post, \
		# but we really can not do that, it would break something else. \
		" /etc/openldap/slapd.conf \
	fi \
done \
%{nil}

%env_update [ ! -x /sbin/env-update ] || /sbin/env-update -u || :


# Build modules for kernels 2.6
# Author: Przemyslaw Iskra <sparky@pld-linux.org>
#
# Usage:
#	%build_kernel_modules -m <modules> -C <directory>
#
#  remember that proper Makefile is still required
# Options:
#  -m <modules> (required) -- comma-separated list of modules to save,
#		without .ko extension, may be placed in subdirectory
#  -C <directory> -- change to <directory> before doing anything
#  -p <arg>, -P <arg> -- arguments passeed to make scripts
#  -c -- do not execute make clean
#  <additional arguments> -- all additional arguments will be passed to
#		make modules
#
# Additional patching supported via here document. Try:
#	%build_kernel_modules -m module <<'EOF'
#	your patch script here
#	EOF
# Don't use it unless patching depends on config options.

# Developer note: don't touch it unless you know how to handle '\'.
# - \ in script expands to nothing
# - \\\ in script expands to \
# - \\\ inside definition expands to nothing
# - \\\\\\\ inside definition expands to \
# - in last line \ has to touch arguments so arguments passing
#   in new lines (using \) will be supported

%build_kernel_modules(p:P:m:C:c)									\
%{!?-m:%{error:%{0}: Required module name/list missing} exit 1}		\
																	\
%define Opts 														\\\\\\\
%if "%{_target_base_arch}" != "%{_arch}"							\\\
	%if "%{_arch}" == "x86_64" && "%{_target_base_arch}" == "i386"	\\\
	CC="%{kgcc}" ARCH=%{_target_base_arch}							\\\
	%else															\\\
	ARCH=%{_target_base_arch} CROSS_COMPILE=%{_target_cpu}-pld-linux- \\\
	%endif															\\\
%else																\\\
	CC="%{kgcc}" 													\\\
%endif																\
%define	MakeOpts HOSTCC="%{kgcc}" SYSSRC=%{_kernelsrcdir} SYSOUT=$PWD/o \\\\\\\
		O=$PWD/o %{?with_verbose:V=1} %{Opts}						\
																	\
%{?-C:cd %{-C*}}													\
compile() {															\
	local L="<" PATCH_SH;											\
	[[ '%{*}' != *$L$L* ]] || PATCH_SH="set -x -e;$(cat)"			\
	set -e -x														\
	local cfgs='%{?with_dist_kernel:%{?with_smp: smp}%{?with_up: up}}%{!?with_dist_kernel: nondist}' \
																	\
for cfg in ${cfgs:-dist}; do                                        \
	[ -r "%{_kernelsrcdir}/config-$cfg" ] || exit 1					\
																	\
	rm -rf o														\
	install -d o/include/linux o/arch/powerpc/lib					\
	ln -sf %{_kernelsrcdir}/config-$cfg o/.config					\
	ln -sf %{_kernelsrcdir}/Module.symvers-$cfg o/Module.symvers	\
	ln -sf %{_kernelsrcdir}/include/linux/autoconf-$cfg.h o/include/linux/autoconf.h \
																	\
	set +x															\
	[ -z "$PATCH_SH" ] || echo "$PATCH_SH" | %__spec_build_shell	\
	set -x															\
																	\
	%if %{with dist_kernel}	|| %(test -f %{_kernelsrcdir}/scripts/bin2c ; echo $?)	\
		%{__make} -j1 -C %{_kernelsrcdir} prepare scripts			\\\
			%{-p*} %{-P*}											\\\
			%{MakeOpts}												\
	%else															\
		install -d o/include/config									\
		touch o/include/config/MARKER								\
		ln -sf %{_kernelsrcdir}/include/config/auto-$cfg.conf o/include/config/auto.conf	\
		ln -sf %{_kernelsrcdir}/scripts o/scripts					\
	%endif															\
																	\
	%{!?-c:%{__make} -C %{_kernelsrcdir} clean						\\\
		RCS_FIND_IGNORE="-name '*.ko' -o"							\\\
		${1+"$@"}													\\\
		M=$PWD %{MakeOpts}}											\
																	\
	%{__make} -C %{_kernelsrcdir} modules							\\\
		${1+"$@"}													\\\
		M=$PWD %{MakeOpts}											\
																	\
	for MODULE in {%{-m*},}; do										\
		[ -z "${MODULE}" ] || mv ${MODULE}{,-$cfg}.ko				\
	done															\
done																\
%{?-C:cd -}															\
}																	\
compile %{*}\
%{nil}


# Install kernel modules built by %build_kernel_modules
# Author: Przemyslaw Iskra <sparky@pld-linux.org>
#
# Usage:
#	%install_kernel_modules -m <modules> -d <directory>
#
# Options:
#  -m <modules> (required) -- comma-separated list of modules to install,
#		without .ko extension, may be placed in subdirectory
#  -d <directory> (required) -- in what subdirectory modules should be
#		installed (eg. misc, kernel/drivers/net)
#  -s <suffix> -- suffix to use when installing modules, useful when module
#		with same name exists in kernel already
#  -n <file> -- name of modprobe config file to use (without .conf extension)
#		for defining aliases, only useful with -s

%install_kernel_modules(m:d:s:n:)									\
%{!?-m:%{error:%{0}: Required module name (-m) missing}exit 1}		\
%{!?-d:%{error:%{0}: Required module directory missing}exit 1}		\
%{?-n:%{!?-s:%{error:%{0}: Modprobe .conf file requires module suffix}exit 1}} \
																	\
%define KernelD $RPM_BUILD_ROOT/lib/modules/%{_kernel_ver}			\
%define ModprobeD $RPM_BUILD_ROOT%{_sysconfdir}/modprobe.d/%{_kernel_ver} \
																	\
__install_kernel_modules() {										\
local cfgs='%{?with_dist_kernel:%{?with_smp: smp}%{?with_up: up}}%{!?with_dist_kernel: nondist}' \
																	\
for MODULE in {%{-m*},}; do											\
	[ -n "${MODULE}" ] || continue									\
	for cfg in ${cfgs:-dist}; do                                    \
		[ "$cfg" = smp ] && suf=smp || suf=							\
		MNAME=${MODULE##*/}											\
		install -D ${MODULE}-$cfg.ko								\\\
			%{KernelD}$suf/%{-d*}/${MNAME}%{-s:-%{-s*}}.ko			\
		%{?-s:install -d %{ModprobeD}$suf							\
			echo "alias ${MNAME} ${MNAME}-%{-s*}"					\\\
			>> %{ModprobeD}$suf/%{-n*}.conf}						\
	done															\
done																\
}																	\
__install_kernel_modules											\
%{nil}

# patchset macros
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# Usage:
#   %patchset_source -f <seq(1) format> <start> [<end>]
#   %patchset_patch <start> [<end>]
#
# If <end> is omited, it is assumed to be <start>.
#
# For example in preamble:
#  %patchset_source -f ftp://ftp.vim.org/pub/editors/vim/patches/7.0/7.0.%03g 33 44
# and in %prep:
#  %patchset_patch 33 44

# generate SourceX urls from range START STOP
# Format can be SINGLE format char of %e, %f, %g, see seq(1)
# The sources start from 10000
%patchset_source(f:b:) %(
	base=%{-b*}%{!-b*:10000};
	start=$(expr $base + %1);
	end=$(expr $base + %{?2}%{!?2:%{1}});
	# we need to call seq twice as it doesn't allow two formats
	seq -f 'Patch%g:' $start $end > %{tmpdir}/__ps1;
	seq -f '%{-f*}' %1 %{?2}%{!?2:%{1}} > %{tmpdir}/__ps2;
	paste %{tmpdir}/__ps{1,2};
	rm -f %{tmpdir}/__ps{1,2};
) \
%{nil}

# apply sources from %patchset_source
# -p specify -pX for %patch line
# -b base offset: defaults to 10000
%patchset_patch(f:p:b:) %(
	base=%{-b*}%{!-b*:10000};
	start=$(expr $base + %1);
	end=$(expr $base + %{?2}%{!?2:%{1}});
	echo ": patchset_patch %1%{?2: to %2}";
	seq -f 'patch%g %{-p*:-p%{-p*}}' $start $end | sed -e s,^,%%,;
) \
%{nil}

# browser plugins v2
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# Usage:
#	%browser_plugins_add_browser <name> -p <plugindir>
#
#  <name> (required) -- name of the browser. usually %{name}.
#  -p <plugindir> (required) -- in what directory browser searches for its plugins.
#  -b -- default blacklists
#  -a <arch> override arch
#
# Example:
#   %browser_plugins_add_browser %{name} -p %{_firefoxdir}/plugins

%_browserpluginsconfdir		/etc/browser-plugins
%_browserpluginsdir			%{_libdir}/browser-plugins
%update_browser_plugins		/usr/sbin/update-browser-plugins || :

%browser_plugins_add_browser(p:b:a:) \
	browser=%1.%{!-a:%{_target_base_arch}}%{-a*} \
	install -d $RPM_BUILD_ROOT%{_browserpluginsconfdir}/{blacklist,browsers}.d \
	ln -s %{-p*} $RPM_BUILD_ROOT%{_browserpluginsconfdir}/browsers.d/$browser \
	blacklist_file=$RPM_BUILD_ROOT%{_browserpluginsconfdir}/blacklist.d/$browser.blacklist \
	echo '# This file format is shell globs at base dir of plugindir' > $blacklist_file \
	%{-b:cat >> $blacklist_file %{-b*}} \
%{nil}

# Helper for LUA.
# split string separated by space into quoted list
#
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# %__lua_split /bin/sh /bin/pdksh -> "/bin/sh", "/bin/pdksh"
%__lua_split() %(echo "%*" | awk '{for (i=1;i<=NF;i++) printf("\\"%%s\\"%%s", $i, i == NF ? "" : ", ")}')

# adjust /etc/shells by adding and removing shells from there
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# Usage:
#   %post	-p <lua>
#   %lua_add_etc_shells /bin/sh /bin/pdksh
#
#   %preun	-p <lua>
#   if arg[2] == 0 then
#       %lua_remove_etc_shells /bin/bash /bin/rbash
#   end
#
# Requirements:
# BuildRequires:	rpmbuild(macros) >= 1.462
#

%lua_add_etc_shells() \
t = {}\
f = io.open("/etc/shells", "r")\
if f then\
	for l in f:lines() do t[l]=l; end\
	f:close()\
end\
for _, s in ipairs({%{expand:%%__lua_split %*}}) do\
	if not t[s] then\
		print("Adding "..s.." to /etc/shells")\
		f = io.open("/etc/shells", "a"); f:write(s.."\\n"); f:close()\
	end\
end\
%{nil}

%lua_remove_etc_shells() \
t = {}\
f = io.open("/etc/shells", "r")\
if f then\
	for l in f:lines() do t[l]=l; end\
	f:close()\
end\
for _, l in pairs({%{expand:%%__lua_split %*}}) do\
	print("Removing "..l.." from /etc/shells")\
	t[l] = nil\
end\
s=""\
for _, l in pairs(t) do\
	s=s..l.."\\n"\
end\
io.open("/etc/shells", "w"):write(s)\
%{nil}

# Backwards compat. Use of %lua_ prefixed macros is preferred as these are cleaner to read.
#
# Author: Elan Ruusamäe <glen@pld-linux.org>
#
# Usage:
#   %post	-p %add_etc_shells -p /bin/sh /bin/pdksh
#   %preun	-p %remove_etc_shells -p /bin/sh /bin/pdksh
#
#  -p (optional) -- specifies that result is embeded %post script (prepends <lua> as first line)
#
# Requirements:
# BuildRequires:	rpmbuild(macros) >= 1.429
#
%add_etc_shells(p) %{-p:<lua>}\
%{expand:%%lua_add_etc_shells %*}\
%{nil}

%remove_etc_shells(p) %{-p:<lua>}\
%{-p:if arg[2] == 0 then}\
%{expand:%%lua_remove_etc_shells %*}\
%{-p:end} \
%{nil}

# Check syntax for Python files
#
# Author: Elan Ruusamäe <glen@pld-linux.org>
# Author: Arkadiusz Miśkiewicz <arekm@pld-linux.org>
#
# Usage:
#   %py_lint src
#
# Requirements:
# BuildRequires:	python
# BuildRequires:	rpmbuild(macros) >= 1.469

%py_lint() \
__py_lint() { \
find "$@" -type f -name '*.py' | python -c ' \
import sys \
import compiler \
\
err = 0\
for f in sys.stdin: \
	fd = open(f.strip()) \
	c = fd.read() \
	fd.close() \
	try: \
		compiler.parse(c) \
	except SyntaxError, e: \
		print "py_lint: %s: %s" % (f.strip(), e) \
		err = err + 1\
\
if err: \
	print >> sys.stderr, "\\npy_lint: ERROR: Syntax errors in %d files.\\n" % err \
	sys.exit(1) \
else: \
	print >> sys.stderr,  "py_lint: Found no syntax errors." \
' \
}; __py_lint %* \
%{nil}

# vim:ts=4 sw=4 noet syn=spec
