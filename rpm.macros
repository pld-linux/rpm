# PLD rpm macros

%__id		@__ID@
%__id_u		%{__id} -u 
%__chown_Rhf           @__CHOWN_RHF@
%__chgrp_Rhf           @__CHGRP_RHF@

%_fixowner       [ `%{__id_u}` = '0' ] && %{__chown_Rhf} root.@ROOT_GROUP@
%_fixgroup       true
%_fixperms             %{__chmod} -Rf @FIXPERMS@
%_topdir         %(echo $HOME)/rpm
%_exec_prefix    %{_prefix}
%_bindir         %{_exec_prefix}/bin
%_sbindir        %{_exec_prefix}/sbin
%_libexecdir     %{_exec_prefix}/lib
%_datadir        %{_prefix}/share
%_sharedstatedir /var/lib
%_lib            lib
%_libdir         %{_exec_prefix}/%{_lib}
%_includedir     %{_prefix}/include
%_oldincludedir  /usr/include
%_sysconfdir     /etc
%_localstatedir  /var
%_infodir        /usr/share/info
%_mandir         %{_prefix}/share/man
%_defaultdocdir  %{_usr}/share/doc
#-----------------------------------------------------------------
# CFLAGS and LDFLAGS used to build

%debugcflags	-O0 -g -Wall
%rpmcflags	%{?debug:%debugcflags}%{!?debug:%optflags}
%rpmldflags	-s

# kernel compiler
%kgcc		gcc2
%kgcc_package	gcc2

# Build system path macros.
#
%__libtoolize           libtoolize --copy --force
%__automake             automake -a -c -f --foreign
%__autoconf             autoconf %{?debug:-Wall}

#-----------------------------------------------------------------
%configure2_13 { \
 if [ -n "$LINGUAS" ]; then unset LINGUAS; fi; \
 LDFLAGS="${LDFLAGS:-%rpmldflags}" ; export LDFLAGS ; \
 CFLAGS="${CFLAGS:-%rpmcflags}" ; export CFLAGS ; \
 CXXFLAGS="${CXXFLAGS:-%rpmcflags}" ; export CXXFLAGS ; \
 FFLAGS="${FFLAGS:-%rpmcflags}" ; export FFLAGS ; \
 CPPFLAGS="${CPPFLAGS:-}" ; export CPPFLAGS ; \
 %{?__cc:CC=%{__cc} ; export CC ; } \
 %{?__cxx:CXX=%{__cxx} ; export CXX ; } \
 ./configure \
	--host=%{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
}

#----------------------------------------------------------------
%configure {./configure \
 	LDFLAGS="${LDFLAGS:-%rpmldflags}" \
	CFLAGS="${CFLAGS:-%rpmcflags}" \
	CXXFLAGS="${CXXFLAGS:-%rpmcflags}" \
	FFLAGS="${FFLAGS:-%rpmcflags}" \
	CPPFLAGS="${CPPFLAGS:-}" \
	%{?__cc:CC=%{__cc}} \
	%{?__cxx:CXX=%{__cxx}} \
	--build=%{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
}

# Location of autoconf macros
%_aclocaldir	%(aclocal --print-ac-dir)

# Location of omf files
%_omf_dest_dir	%(scrollkeeper-config --omfdir)

# Location of pkgconfig files
%_pkgconfigdir	/usr/lib/pkgconfig

# Location of top applink dir
%_applnkdir      /usr/X11R6/share/applnk

# Location pixmaps for applnk/desktop files
%_pixmapsdir	/usr/X11R6/share/pixmaps

# Location of fonts directories
%_fontsdir	/usr/share/fonts

# Current date
%date 		%(LC_ALL="C" date +"%a %b %d %Y")

# tmp directory
%tmpdir		%(echo "${TMPDIR:-/tmp}")

# Example files, programs, scripts...
%_examplesdir	/usr/src/examples

# The directory holding Linux kernel sources
%_kernelsrcdir	/usr/src/linux

# If non-empty "debug" macro defined, add "dbg" suffix to release number
%_rpmfilename		%%{NAME}-%%{VERSION}-%%{RELEASE}%{?debug:dbg}.%%{ARCH}.rpm

# Requires name = version-release
%requires_releq()  		%(LC_ALL="C" echo '%*' | xargs -r rpm -q --qf 'Requires: %%{name} = %%{epoch}:%%{version}-%%{release}\\n' | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -v "is not")
%requires_kernel_releq()  	%(LC_ALL="C" rpm -q --qf 'Prereq: kernel = %%{epoch}:%%{version}-%%{release}\\n' kernel-headers | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -v "is not")
%requires_releq_kernel_up()  	%(LC_ALL="C" rpm -q --qf 'Prereq: kernel-up = %%{epoch}:%%{version}-%%{release}\\n' kernel-headers | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -v "is not")
%requires_releq_kernel_smp()  	%(LC_ALL="C" rpm -q --qf 'Prereq: kernel-smp = %%{epoch}:%%{version}-%%{release}\\n' kernel-headers | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -v "is not")

# kernel version-release handling
%__kernel_ver    %(grep UTS_RELEASE %{_kernelsrcdir}/include/linux/version.h 2>/dev/null | cut -d'"' -f2)
%__kernel_rel    %(LC_ALL="C" rpm -qf %{_kernelsrcdir}/include/linux/version.h --queryformat "%{RELEASE}" | grep -v "is not")
%_kernel_ver     %(echo %{__kernel_ver}%{!?_without_dist_kernel:-%{__kernel_rel}})
%_kernel_ver_str %(echo %{_kernel_ver} | sed s/-/_/g)

#-----------------------------------------------------------------
# find and gzip all files in %{_mandir} and %{infodir}
#
# Requires: xargs, find
#
#%no_install_post_compress_docs	1
%__spec_install_post_compress_docs { \
echo "Compress man and info pages."; \
%{!?no_install_post_compress_docs: \
	%{?verbose:set -x;} \
	for i in /usr/share/man /usr/X11R6/man /usr/share/info; do \
		if [ -d "$RPM_BUILD_ROOT$i" ]; then \
			find "$RPM_BUILD_ROOT$i" -name \*.bz2 -print | xargs -r %{__bzip2} -df; \
			find "$RPM_BUILD_ROOT$i" -name \*.gz -print | xargs -r %{__gzip} -dnf; \
			find "$RPM_BUILD_ROOT$i" -type f -print | xargs -r %{__gzip} -9nf; \
		fi; \
	done; \
} }

#-----------------------------------------------------------------
# Strip executable binaries and shared object files
#
# Requires: find, awk, strip, cut, xargs
#
#%no_install_post_strip	1
%__spec_install_post_strip {%{!?debug: \
%{!?no_install_post_strip: \
	%{?verbose:set -x;} \
	echo "Strip executable binaries, archives and shared object files."; \
	filelist=`find $RPM_BUILD_ROOT -type f ! -regex ".*ld-[0-9.]*so.*"`; \
	elfexelist=`echo $filelist | xargs -r file | \
		awk '/ELF.*executable/ {print $1}' | cut -d: -f1`; \
	elfsharedlist=`echo $filelist | xargs -r file | \
		awk '/LF.*shared object/ {print $1}' | cut -d: -f1`; \
	elfarchiveslist=`echo $filelist | xargs -r file | \
		awk '/current ar archive/ {print $1}' | cut -d: -f1`; \
	if [ -n "$elfexelist" ]; then \
		strip --remove-section=.note  --remove-section=.comment $elfexelist; \
	fi; \
	if [ -n "$elfsharedlist" ]; then \
		strip --strip-unneeded --remove-section=.note  --remove-section=.comment $elfsharedlist; \
	fi; \
	if [ -n "$elfarchiveslist" ]; then \
		strip --strip-debug --remove-section=.note  --remove-section=.comment $elfarchiveslist; \
	fi; } \
} }

%_source_payload        w9.gzdio
%_binary_payload        w9.bzdio

#-----------------------------------------------------------------
# post %install sequence:
# - autodeps exceptions
# - compress all man and info pages,
# - strip all ELF executables and ELF shared objects if not %debug.

###################################################################
# Requires/Provides automation
# exceptions system by Jacek Konieczny <jajcus@pld.org.pl>
%__spec_prep_pre \
_autoreqprov=n \
%{?_noautoreqfiles:_autoreqprov=y}\
%{?_noautoreq:_autoreqprov=y}\
%{?_noautoreqdep:_autoreqprov=y}\
%{?_noautoprovfiles:_autoreqprov=y}\
%{?_noautoprov:_autoreqprov=y}\
%{?_noautocompressdoc:_autoreqprov=y}\
if [ "$_autoreqprov" = "y" ] ; then \
    if [ -f %{_builddir}/__rpm_lock ] ; then \
	echo "Some package using \%_noauto*  macros is already being built" >&2 \
	echo "If it is not true delete %{_builddir}/__rpm_lock" >&2 \
	exit 1 \
    else \
	rm -f %{_builddir}/__rpm_*\
    	touch %{_builddir}/__rpm_lock \
    fi \
fi \
%{?_noautocompressdoc:echo '%{_noautocompressdoc}' > %{_builddir}/__rpm_noautocompressdoc}\
%{nil}

%__os_install_post \
%{?_noautoreqfiles:for f in %{_noautoreqfiles} ; do echo %{?buildroot:%{buildroot}}$f >> %{_builddir}/__rpm_noautoreqfiles ; done }\
%{?_noautoreq:for f in %{_noautoreq} ; do echo "$f" >> %{_builddir}/__rpm_noautoreq ; done }\
%{?_noautoreqdep:for f in %{_noautoreqdep} ; do echo "$f" >> %{_builddir}/__rpm_noautoreqdep ; done }\
%{?_noautoprovfiles:for f in %{_noautoprovfiles} ; do echo %{?buildroot:%{buildroot}}$f >> %{_builddir}/__rpm_noautoprovfiles ; done }\
%{?_noautoprov:for f in %{_noautoprov} ; do echo "$f" >> %{_builddir}/__rpm_noautoprov ; done }\
%{__spec_install_post_strip}\
%{__spec_install_post_compress_docs}\
%{__arch_install_post}\
%{nil}

%__spec_clean_pre	%{___build_pre}\
_autoreqprov=n \
%{?_noautoreqfiles:_autoreqprov=y}\
%{?_noautoreq:_autoreqprov=y}\
%{?_noautoreqdep:_autoreqprov=y}\
%{?_noautoprovfiles:_autoreqprov=y}\
%{?_noautoprov:_autoreqprov=y}\
%{?_noautoreqfiles:_autoreqprov=y}\
%{?_noautocompressdoc:_autoreqprov=y}\
if [ "$_autoreqprov" = "y" ] ; then \
	rm -f %{_builddir}/__rpm_* \
fi \
%{nil}


#%_noautoreqfiles	"%{_defaultdocdir}.*" "%{_examplesdir}.*"
#%_noautoreq		%{nil}
#%_noautoreqdep		%{nil}
#%_noautoprovfiles	%{nil}
#%_noautoprov		%{nil}
