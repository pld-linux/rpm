#-----------------------------------------------------------------
# CFLAGS and LDFLAGS used to build

%debugcflags	-O0 -g
%rpmcflags	%{?debug:%debugcflags}%{!?debug:%optflags}
%rpmldflags	%{!?debug:-s}

#-----------------------------------------------------------------
%configure { \
 if [ -n "$LINGUAS" ]; then unset LINGUAS; fi; \
 LDFLAGS="${LDFLAGS:-%rpmldflags}" ; export LDFLAGS ; \
 CFLAGS="${CFLAGS:-%rpmcflags}" ; export CFLAGS ; \
 CXXFLAGS="${CXXFLAGS:-%rpmcflags}" ; export CXXFLAGS ; \
 FFLAGS="${FFLAGS:-%rpmcflags}" ; export FFLAGS ; \
 ./configure \
	--host=%{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
}

#----------------------------------------------------------------
%configure2_50 { \
 if [ -n "$LINGUAS" ]; then unset LINGUAS; fi; \
 ./configure \
 	LDFLAGS="${LDFLAGS:-%rpmldflags}" \
	CFLAGS="${CFLAGS:-%rpmcflags}" \
	CXXFLAGS="${CXXFLAGS:-%rpmcflags}" \
	FFLAGS="${FFLAGS:-%rpmcflags}" \
	--build=%{_target_platform} \
 	--prefix=%{_prefix} \
	--exec-prefix=%{_exec_prefix} \
	--bindir=%{_bindir} \
	--sbindir=%{_sbindir} \
	--sysconfdir=%{_sysconfdir} \
	--datadir=%{_datadir} \
	--includedir=%{_includedir} \
	--libdir=%{_libdir} \
	--libexecdir=%{_libexecdir} \
	--localstatedir=%{_localstatedir} \
	--sharedstatedir=%{_sharedstatedir} \
	--mandir=%{_mandir} \
	--infodir=%{_infodir} \
}

#------------------------------------------------------------------------------
# The GNUconfigure macro does the following:
#       update config.guess and config.sub.
#       regenerate all autoconf/automake files
#       optionally change to a directory (make the directory if requested).
#       run configure with correct prefix, platform, and CFLAGS.
#       optionally restore current directory.
#
# Based on autogen.sh from GNOME and orginal GNUconfigure
#
%GNUconfigure(MCs:)      \
  %{-C:_mydir="`pwd`"; %{-M: %{__mkdir} -p %{-C*};} cd %{-C*}} \
  dirs="`find ${_mydir} -name configure.in -print`"; export dirs; \
    for coin in `echo ${dirs}` \
do \
  dr=`dirname ${coin}`; \
if test -f ${dr}/NO-AUTO-GEN; then \
 : \
else \
     macrodirs=`sed -n -e 's,AM_ACLOCAL_INCLUDE(\(.*\)),\1,gp' < ${coin}`; \
    ( cd ${dr}; \
      aclocalinclude="${ACLOCAL_FLAGS}"; \
      for k in ${macrodirs}; do \
        if test -d ${k}; then \
          aclocalinclude="${aclocalinclude} -I ${k}"; \
        ##else \
        ##  echo "**Warning**: No such directory \`${k}'.  Ignored." \
        fi \
      done \
      if grep "^AM_GNU_GETTEXT" configure.in >/dev/null; then \
        if grep "sed.*POTFILES" configure.in >/dev/null; then \
          : do nothing -- we still have an old unmodified configure.in \
        else \
          test -r ${dr}/aclocal.m4 || touch ${dr}/aclocal.m4; \
          echo "no" | gettextize --force --copy; \
          test -r ${dr}/aclocal.m4 && %{__chmod} u+w ${dr}/aclocal.m4; \
        fi \
      fi \
      if grep "^AM_PROG_LIBTOOL" configure.in >/dev/null; then \
        %{__libtoolize} --force --copy; \
      fi \
      aclocal ${aclocalinclude}; \
      if grep "^AM_CONFIG_HEADER" configure.in >/dev/null; then \
        %{__autoheader}; \
      fi \
      echo "Running automake --gnu ${am_opt} ..."; \
      %{__automake} --add-missing --gnu ${am_opt}; \
      %{__autoconf}; \
    ); \
  fi \
done \
  %{-C:${_mydir}}%{!-C:.}/%{configure} \
  %{-C:cd ${_mydir}; unset _mydir}

# Location of autoconf macros
%_aclocaldir	%(aclocal --print-ac-dir)

# Location of pkgconfig files
%_pkgconfigdir	/usr/lib/pkgconfig

# Location of top applink dir
%_applnkdir      /usr/X11R6/share/applnk

# Location pixmaps for applnk/desktop files
%_pixmapsdir	/usr/X11R6/share/pixmaps

# Location of fonts directories
%_fontsdir	/usr/share/fonts

# Current date
%date 		%(LC_ALL="C" date +"%a %b %d %Y")

# tmp directory
%tmpdir		%(echo "${TMPDIR:-/tmp}")

# Example files, programs, scripts...
%_examplesdir	/usr/src/examples

# If non-empty "debug" macro defined, add "dbg" suffix to release number
%_rpmfilename		%%{NAME}-%%{VERSION}-%%{RELEASE}%{?debug:dbg}.%%{ARCH}.rpm

#-----------------------------------------------------------------
# find and gzip all files in %{_mandir} and %{infodir}
#
# Requires: xargs, find
#
#%no_install_post_compress_docs	1
%__spec_install_post_compress_docs { \
echo "Compress man and info pages."; \
%{!?no_install_post_compress_docs: \
	%{?verbose:set -x;} \
	for i in /usr/share/man /usr/X11R6/man /usr/share/info; do \
		if [ -d "$RPM_BUILD_ROOT$i" ]; then \
			find "$RPM_BUILD_ROOT$i" -name \*.bz2 -print | xargs -r %{__bzip2} -df; \
			find "$RPM_BUILD_ROOT$i" -name \*.gz -print | xargs -r %{__gzip} -dnf; \
			find "$RPM_BUILD_ROOT$i" -type f -print | xargs -r %{__gzip} -9nf; \
		fi; \
	done; \
} }

#-----------------------------------------------------------------
# Strip executable binaries and shared object files
#
# Requires: find, awk, strip, cut, xargs
#
#%no_install_post_strip	1
%__spec_install_post_strip {%{!?debug: \
%{!?no_install_post_strip: \
	%{?verbose:set -x;} \
	echo "Strip executable binaries and shared object files."; \
	filelist=`find $RPM_BUILD_ROOT -type f ! -regex ".*ld-[0-9.]*so.*"`; \
	elfexelist=`echo $filelist | xargs -r file | \
		awk '/ELF.*executable/ {print $1}' | cut -d: -f1`; \
	elfsharedlist=`echo $filelist | xargs -r file | \
		awk '/LF.*shared object/ {print $1}' | cut -d: -f1`; \
	if [ -n "$elfexelist" ]; then \
		strip --remove-section=.note  --remove-section=.comment $elfexelist; \
	fi; \
	if [ -n "$elfsharedlist" ]; then \
		strip --strip-unneeded --remove-section=.note  --remove-section=.comment $elfsharedlist; \
	fi; } \
} }

%_source_payload        w9.gzdio
%_binary_payload        w9.bzdio

#-----------------------------------------------------------------
# post %install sequence:
# - autodeps exceptions
# - compress all man and info pages,
# - strip all ELF executables and ELF shared objects if not %debug.

###################################################################
# Requires/Provides automation
# exceptions system by Jacek Konieczny <jajcus@pld.org.pl>
%__spec_prep_pre \
_autoreqprov=n \
%{?_noautoreqfiles:_autoreqprov=y}\
%{?_noautoreq:_autoreqprov=y}\
%{?_noautoreqdep:_autoreqprov=y}\
%{?_noautoprovfiles:_autoreqprov=y}\
%{?_noautoprov:_autoreqprov=y}\
if [ "$_autoreqprov" = "y" ] ; then \
    if [ -f %{_builddir}/__rpm_lock ] ; then \
	echo "Some package using \%_noauto*  macros is already being built" >&2 \
	echo "If it is not true delete %{_builddir}/__rpm_lock" >&2 \
	exit 1 \
    else \
	rm -f %{_builddir}/__rpm_*\
    	touch %{_builddir}/__rpm_lock \
    fi \
fi \
%{nil}

%__spec_install_post \
%{?_noautoreqfiles:for f in %{_noautoreqfiles} ; do echo %{?buildroot:%{buildroot}}$f >> %{_builddir}/__rpm_noautoreqfiles ; done }\
%{?_noautoreq:for f in %{_noautoreq} ; do echo "$f" >> %{_builddir}/__rpm_noautoreq ; done }\
%{?_noautoreqdep:for f in %{_noautoreqdep} ; do echo "$f" >> %{_builddir}/__rpm_noautoreqdep ; done }\
%{?_noautoprovfiles:for f in %{_noautoprovfiles} ; do echo %{?buildroot:%{buildroot}}$f >> %{_builddir}/__rpm_noautoprovfiles ; done }\
%{?_noautoprov:for f in %{_noautoprov} ; do echo "$f" >> %{_builddir}/__rpm_noautoprov ; done }\
%{__spec_install_post_strip}\
%{__spec_install_post_compress_docs}\
%{__arch_install_post}\
%{__os_install_post}\
%{nil}

%__spec_clean_pre	%{___build_pre}\
_autoreqprov=n \
%{?_noautoreqfiles:_autoreqprov=y}\
%{?_noautoreq:_autoreqprov=y}\
%{?_noautoreqdep:_autoreqprov=y}\
%{?_noautoprovfiles:_autoreqprov=y}\
%{?_noautoprov:_autoreqprov=y}\
%{?_noautoreqfiles:_autoreqprov=y}\
if [ "$_autoreqprov" = "y" ] ; then \
	rm -f %{_builddir}/__rpm_* \
fi \
%{nil}


#%_noautoreqfiles	"%{_defaultdocdir}.*" "%{_examplesdir}.*"
#%_noautoreq		%{nil}
#%_noautoreqdep		%{nil}
#%_noautoprovfiles	%{nil}
#%_noautoprov		%{nil}


